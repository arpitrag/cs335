
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOGICAL_ORleftLOGICAL_ANDleftORleftXORleftANDleftEQUALSNOT_ASSIGNleftLESSERGREATERLESS_EQUALSMORE_EQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftSTARDIVIDEMODAND AND_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE SEMICOLON STAR STAR_ASSIGN STRING STRUCT SWITCH TYPE VAR XOR XOR_ASSIGNstart : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepPackageClause : PACKAGE PackageNamePackageName : IDENTIFIER PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilonImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  ImportPath : STRING TopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonTopLevelDecl : Declaration\n                  | FunctionDeclDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonFunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilonTypeOpt : Type\n               | epsilonType : TypeName\n            | TypeLit\n            | LPAREN Type RPARENTypeName : IDENTIFIER\n                | QualifiedIdentTypeLit : ArrayType\n               | StructType\n               | PointerTypeQualifiedIdent : PackageName DOT IDENTIFIERExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonBinaryOp : LOGICAL_OR\n                | LOGICAL_AND\n                | RelOp\n                | AddMulOpRelOp : EQUALS\n             | NOT_ASSIGN\n             | LESSER\n             | GREATER\n             | LESS_EQUALS\n             | MORE_EQUALSAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIVIDE\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : PLUS\n               | MINUS\n               | STAR\n               | AND UnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LCURL FieldDeclRep RCURL FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PrimaryExpr : Operand\n                   | Conversion\n                   | PrimaryExpr Selector\n                   | PrimaryExpr Index\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERIndex : LSQUARE Expression RSQUARESlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                             | Type ExpressionListCommaOpt\n                             | epsilonCommaOpt : COMMA\n                | epsilonExpressionListCommaOpt : COMMA ExpressionList\n                              | epsilonConversion : Type LPAREN Expression CommaOpt RPARENOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLit\n               | CompositeLitBasicLit : INTEGER\n                | FLOAT\n                | IMAGINARY\n                | RUNE\n                | STRINGOperandName : IDENTIFIER\n                   | QualifiedIdentPointerType : STAR BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParameterListCommaOpt RPARENParameterListCommaOpt : ParametersList CommaOpt\n                             | epsilonParametersList : ParameterDecl ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | epsilonParameterDecl : IdentifierList Type\n                     | TypeCompositeLit : LiteralType LiteralValueLiteralType : StructType\n                   | ArrayType\n                   | ElementType\n                   | TypeNameLiteralValue : LCURL ElementListCommaOpt RCURLElementListCommaOpt : ElementList CommaOpt\n                           | epsilonElementList : KeyedElement KeyedElementCommaRepKeyedElementCommaRep : KeyedElementCommaRep COMMA KeyedElement\n                            | epsilonKeyedElement : Key COLON Element\n                    | ElementKey : FieldName\n           | Expression\n           | LiteralValueFieldName : IDENTIFIERElement : Expression\n               | LiteralValueStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  LabeledStmt : Label SEMICOLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  SimpleStmt : epsilon \n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  ShortVarDecl : IdentifierList QUICK_ASSIGN ExpressionList  IncDecStmt : Expression INCR \n                 | Expression DECR  Assignment : ExpressionList assign_op ExpressionList assign_op : AddMulOp ASSIGN\n                | ASSIGN  IfStmt : IF SimpleStmtOpt Expression Block ElseOpt  SimpleStmtOpt : SimpleStmt SEMICOLON\n                    | epsilon  ElseOpt : ELSE IfStmt\n              | ELSE Block\n              | epsilon  SwitchStmt : ExprSwitchStmt \n                 | TypeSwitchStmt  ExprSwitchStmt : SWITCH SimpleStmtOpt ExpressionOpt LCURL ExprCaseClauseRep RCURL ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                        | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                     | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                    | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                        | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                     | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n              | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n             | Condition\n             | ForClause\n             | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n             | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGN\n              | IdentifierList QUICK_ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label epsilon : '
    
_lr_action_items = {'FUNC':([4,7,8,9,10,23,34,],[-249,-7,-249,19,-16,-8,-15,]),'DIVIDE':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,179,-136,-134,-141,179,-70,-140,179,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,179,-116,179,179,-140,179,-140,179,179,-121,-117,-162,-140,179,179,179,179,-120,-129,179,-140,179,179,-118,179,179,179,-119,]),'CONST':([4,7,8,9,10,23,34,130,196,197,288,294,393,395,],[-249,-7,-249,13,-16,-8,-15,-249,13,-51,-50,13,-249,-249,]),'LPAREN':([12,13,20,22,32,33,35,36,39,44,51,52,54,56,57,58,59,61,65,66,67,68,70,72,76,80,85,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,113,115,116,117,118,119,122,130,131,134,142,150,151,152,153,154,156,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,195,196,197,205,211,212,216,220,221,223,224,227,237,238,246,252,256,258,268,271,272,273,275,277,278,282,283,288,294,295,299,312,313,314,315,320,326,327,331,338,339,341,342,343,345,347,349,351,353,354,362,364,367,372,376,378,383,388,393,395,402,],[24,31,38,42,52,-249,-37,72,52,52,52,52,-67,-63,-62,-65,-68,91,-69,-66,-31,-29,122,52,91,52,-143,-142,-110,-94,154,91,160,-67,-130,-109,-138,166,-93,-131,-133,-62,-92,-135,-137,-65,-68,-139,-95,-136,91,-134,-66,91,52,-249,52,-249,91,-64,-70,166,-65,154,-66,-112,-113,154,-111,-114,-115,91,221,91,52,-94,-85,-76,-90,-91,-78,-84,-83,91,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,91,-30,-249,91,-51,-149,-94,-132,166,-116,52,-101,-99,-65,-102,52,91,91,91,-65,91,52,91,-121,91,91,-117,91,-162,-50,91,91,-65,-203,91,-200,91,91,-120,-129,91,91,91,91,-200,-202,-65,-218,91,-199,-118,91,-217,160,91,388,-119,52,91,52,-249,-249,52,]),'MORE_EQUALS':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,174,-136,-134,-141,174,-70,-140,174,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,174,-116,174,174,-140,174,-140,174,-121,-117,-162,-140,174,174,174,-120,-129,174,-140,174,174,-118,174,174,174,-119,]),'DEFAULT':([196,197,288,361,363,368,369,370,371,381,387,393,395,399,400,],[-49,-51,-50,-249,-249,382,-220,385,-211,-219,-210,-249,-249,-221,-212,]),'GOTO':([130,196,197,288,294,393,395,],[-249,243,-51,-50,243,-249,-249,]),'LOGICAL_AND':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,170,-136,-134,-141,170,-70,-140,170,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,170,-116,170,170,-140,170,-140,170,-121,-117,-162,-140,170,170,170,-120,-129,170,-140,170,170,-118,170,170,170,-119,]),'LSHIFT':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,171,-136,-134,-141,171,-70,-140,171,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,171,-116,171,171,-140,171,-140,171,171,-121,-117,-162,-140,171,171,171,171,-120,-129,171,-140,171,171,-118,171,171,171,-119,]),'STAR':([32,33,39,44,51,52,61,67,68,70,72,76,80,89,90,91,92,93,95,96,97,99,100,101,103,104,105,106,108,109,112,113,115,116,117,118,119,122,130,131,134,142,144,151,153,154,155,156,157,158,159,160,161,162,163,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,193,195,196,197,205,208,209,211,212,219,220,221,222,225,227,232,238,246,252,256,258,261,262,268,271,272,273,275,277,278,282,283,288,294,295,299,304,306,312,313,314,315,320,322,325,326,327,330,331,338,339,341,342,343,345,347,348,349,351,352,353,354,359,360,362,366,367,376,378,383,388,393,395,402,],[51,-249,51,51,51,51,90,-31,-29,51,51,90,51,-110,-94,90,90,-96,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-71,168,-95,-136,90,-134,-141,90,51,-249,51,-249,90,168,-70,-140,211,168,-141,-97,-112,-113,211,-111,-114,-115,90,90,51,-94,-85,-76,-90,-91,-78,-84,-83,90,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,90,-98,-30,-249,90,-51,-149,-32,-34,-94,-132,168,-116,51,168,168,-140,168,51,90,90,90,-140,168,168,90,51,90,-121,90,90,-117,90,-162,-50,90,90,-140,168,168,-203,90,-200,90,90,168,168,-120,-129,168,90,90,90,90,-200,-202,-140,-218,168,51,-199,168,-118,90,168,168,-217,168,90,-119,51,90,51,-249,-249,51,]),'RUNE':([61,76,90,91,92,99,103,113,116,119,130,142,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,246,252,256,268,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,383,393,395,],[97,97,-94,97,97,-93,-92,-95,97,97,-249,97,97,97,97,97,-94,-85,-76,-90,-91,-78,-84,-83,97,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,97,97,-51,-94,97,97,97,97,97,97,97,97,-50,97,97,-203,97,-200,97,97,97,97,97,97,-200,-202,-218,97,-199,97,-217,97,97,-249,-249,]),'MINUS':([61,76,89,90,91,92,93,95,96,97,99,100,101,103,104,105,106,108,109,112,113,115,116,117,118,119,130,142,144,151,153,154,155,156,157,158,159,160,161,162,163,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,196,197,208,209,211,212,219,220,222,225,227,232,246,252,256,258,261,262,268,272,273,275,277,278,282,283,288,294,295,299,304,306,312,313,314,315,320,322,325,326,327,330,331,338,339,341,342,343,345,348,351,352,353,354,359,360,366,367,376,383,393,395,],[99,99,-110,-94,99,99,-96,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-71,99,-95,-136,99,-134,-141,99,-249,99,99,-70,-140,99,99,-141,-97,-112,-113,99,-111,-114,-115,99,99,-94,-85,-76,-90,-91,-78,-84,-83,99,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,99,-98,99,-51,-32,-34,-94,-132,99,-116,99,99,-140,99,99,99,99,-140,99,99,99,99,-121,99,99,-117,99,-162,-50,99,99,-140,99,99,-203,99,-200,99,99,99,99,-120,-129,99,99,99,99,99,-200,-202,-140,99,-199,99,-118,99,99,99,99,99,-119,99,-249,-249,]),'DOT':([12,24,45,46,53,58,89,93,95,96,97,100,101,104,105,106,108,115,117,118,134,148,151,153,156,158,159,161,162,163,187,195,212,220,227,258,273,278,283,299,326,327,345,353,364,376,],[29,-249,-12,29,88,-3,-110,165,-130,-109,-138,-131,-133,-135,-137,-3,-139,-136,-134,-141,-3,-11,-70,-3,-141,-112,-113,-111,-114,-115,-157,-3,-132,-116,-3,-3,-121,-117,-162,-3,-120,-129,-3,-118,372,-119,]),'LCURL':([54,56,57,58,59,63,65,66,70,71,85,86,89,93,94,95,96,97,98,100,101,102,104,105,106,107,108,109,111,114,115,117,118,123,124,125,126,127,130,144,150,151,152,153,156,157,158,159,161,162,163,187,188,189,196,197,205,208,209,212,216,220,223,224,225,227,237,240,242,250,252,256,258,259,262,267,273,278,282,283,288,294,298,299,300,301,302,305,306,312,313,317,318,322,326,327,331,337,343,344,345,346,347,348,350,352,353,360,367,374,376,377,393,395,401,],[-67,-63,-62,-65,-68,120,-69,-66,-249,130,-143,-142,-110,-96,-67,-130,-109,-138,-101,-131,-133,-62,-135,-137,-65,-68,-139,-71,-160,188,-136,-134,-66,-147,-148,-144,-146,-145,-249,-249,-64,-70,-101,-65,-66,-97,-112,-113,-111,-114,-115,-157,188,-98,130,-51,-149,-32,-34,-132,-101,-116,-101,-99,-72,-65,-102,-191,-193,-192,-249,-249,-65,-190,-189,-194,-121,-117,188,-162,-50,130,-231,-65,-229,-228,130,-230,-232,-203,-249,-197,-196,-33,-120,-129,188,-195,-202,361,-65,363,-74,-73,-198,130,-118,-236,-249,130,-119,-233,-249,-249,-216,]),'RSQUARE':([89,93,95,96,97,100,101,104,105,106,108,109,110,112,115,117,118,151,157,158,159,161,162,163,187,189,212,218,219,220,225,273,277,278,283,324,325,326,327,353,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,167,-100,-136,-134,-141,-70,-97,-112,-113,-111,-114,-115,-157,-98,-132,-74,278,-116,-72,-121,-249,-117,-162,353,-73,-120,-129,-118,376,-119,]),'BREAK':([130,196,197,288,294,393,395,],[-249,263,-51,-50,263,-249,-249,]),'INCR':([89,93,95,96,97,100,101,104,105,106,108,109,115,117,118,151,157,158,159,161,162,163,187,189,212,220,225,258,262,273,278,283,299,306,326,327,353,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,-136,-134,-141,-70,-97,-112,-113,-111,-114,-115,-157,-98,-132,-116,-72,-140,318,-121,-117,-162,-140,318,-120,-129,-118,-119,]),'RPAREN':([24,31,38,42,45,46,49,50,54,56,57,58,59,65,66,72,73,74,77,78,85,86,87,89,93,94,95,96,97,100,101,102,104,105,106,107,108,109,115,117,118,122,132,133,134,135,136,137,144,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,187,189,194,195,199,200,201,202,203,204,206,208,209,210,212,213,214,215,216,220,222,223,224,225,237,273,274,276,278,279,280,283,321,322,323,326,327,353,376,396,],[-249,-249,-249,-249,-12,81,84,-25,-67,-63,-62,-65,-68,-69,-66,-249,138,-55,145,-43,-143,-142,150,-110,-96,-67,-130,-109,-138,-131,-133,-62,-135,-137,-140,-68,-139,-71,-136,-134,-141,-249,-156,-249,-65,-249,-151,205,-249,-11,-24,-64,-70,150,-65,212,-66,-97,-112,-113,-249,-111,-114,-115,-157,-98,150,-65,-155,-150,-126,-125,-152,-154,-54,-32,-34,-42,-132,-124,273,-122,-249,-116,-249,-101,-99,-72,-102,-121,-123,-128,-117,326,327,-162,-153,-33,-127,-120,-129,-118,-119,401,]),'SEMICOLON':([1,5,6,11,14,15,16,17,18,21,25,30,32,33,37,40,41,43,47,48,54,56,57,58,59,60,64,65,66,67,68,69,70,71,75,79,81,82,83,84,85,86,89,93,95,96,97,100,101,104,105,106,108,109,115,117,118,123,124,125,126,127,128,129,130,138,139,140,141,143,144,145,146,147,150,151,157,158,159,161,162,163,187,189,190,193,196,197,205,207,208,209,212,220,223,224,225,236,237,239,240,241,242,244,245,246,247,248,250,251,252,253,254,255,256,257,258,259,260,262,263,264,265,266,267,268,269,270,273,278,283,287,288,289,290,291,292,293,294,296,299,301,306,308,309,310,311,312,317,318,319,322,326,327,332,333,334,335,336,337,338,340,350,353,356,357,358,359,365,373,375,376,380,386,389,390,393,395,],[4,-2,-3,23,-18,34,-17,-19,-20,-21,-9,-22,-249,-249,-52,-45,-44,-40,-13,-14,-67,-63,-62,-65,-68,-28,-26,-69,-66,-31,-29,-35,-249,-36,-249,-47,-10,148,149,-23,-143,-142,-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,-136,-134,-141,-147,-148,-144,-146,-145,-38,-39,-249,-53,206,-59,-56,-57,-249,-41,210,-46,-64,-70,-97,-112,-113,-111,-114,-115,-157,-98,-27,-30,-249,-51,-149,-58,-32,-34,-132,-116,-101,-99,-72,286,-102,-181,-191,288,-193,-177,-208,-249,294,-207,-192,-182,-249,-183,-185,-249,-249,-176,-140,-190,-184,-189,-249,-179,-178,-186,-194,-249,-180,-48,-121,-117,-162,-249,-50,-188,-248,-241,-243,-242,-249,338,-140,-190,-189,-247,-245,-246,343,-190,-197,-196,-244,-33,-120,-129,-108,-107,-106,-105,-187,-195,-249,-227,-198,-118,-235,-234,367,-232,-249,-206,-201,-119,-215,-209,-204,-205,-249,-249,]),'RCURL':([89,93,95,96,97,100,101,104,105,106,108,109,115,117,118,120,130,151,157,158,159,161,162,163,187,188,189,191,192,196,197,198,201,202,212,220,225,226,227,229,230,231,232,233,234,273,278,281,283,284,285,286,288,326,327,328,329,330,353,355,361,363,368,369,370,371,376,381,387,393,395,399,400,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,-136,-134,-141,-249,-249,-70,-97,-112,-113,-111,-114,-115,-157,-249,-98,237,-104,-49,-51,270,-126,-125,-132,-116,-72,-249,-140,-164,-169,-175,-174,283,-249,-121,-117,-163,-162,-165,-167,-103,-50,-120,-129,-168,-175,-174,-118,-166,-249,-249,380,-220,386,-211,-119,-219,-210,-249,-249,-221,-212,]),'LESS_EQUALS':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,175,-136,-134,-141,175,-70,-140,175,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,175,-116,175,175,-140,175,-140,175,-121,-117,-162,-140,175,175,175,-120,-129,175,-140,175,175,-118,175,175,175,-119,]),'PLUS':([61,76,89,90,91,92,93,95,96,97,99,100,101,103,104,105,106,108,109,112,113,115,116,117,118,119,130,142,144,151,153,154,155,156,157,158,159,160,161,162,163,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,196,197,208,209,211,212,219,220,222,225,227,232,246,252,256,258,261,262,268,272,273,275,277,278,282,283,288,294,295,299,304,306,312,313,314,315,320,322,325,326,327,330,331,338,339,341,342,343,345,348,351,352,353,354,359,360,366,367,376,383,393,395,],[103,103,-110,-94,103,103,-96,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-71,103,-95,-136,103,-134,-141,103,-249,103,103,-70,-140,103,103,-141,-97,-112,-113,103,-111,-114,-115,103,103,-94,-85,-76,-90,-91,-78,-84,-83,103,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,103,-98,103,-51,-32,-34,-94,-132,103,-116,103,103,-140,103,103,103,103,-140,103,103,103,103,-121,103,103,-117,103,-162,-50,103,103,-140,103,103,-203,103,-200,103,103,103,103,-120,-129,103,103,103,103,103,-200,-202,-140,103,-199,103,-118,103,103,103,103,103,-119,103,-249,-249,]),'SWITCH':([130,196,197,288,294,393,395,],[-249,256,-51,-50,256,-249,-249,]),'COLON':([54,56,57,58,59,65,66,85,86,89,93,95,96,97,100,101,104,105,106,108,109,115,117,118,144,150,151,157,158,159,161,162,163,164,187,189,208,209,212,217,218,219,220,223,224,225,227,228,231,232,235,237,273,278,283,322,325,326,327,353,376,379,382,384,385,391,392,394,397,398,403,],[-67,-63,-62,-65,-68,-69,-66,-143,-142,-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,-136,-134,-141,-249,-64,-70,-97,-112,-113,-111,-114,-115,-249,-157,-98,-32,-34,-132,277,-74,-73,-116,-101,-99,-72,-140,282,-172,-171,-170,-102,-121,-117,-162,-33,354,-120,-129,-118,-119,393,-223,395,-214,-249,-222,-213,-224,-226,-225,]),'DECR':([89,93,95,96,97,100,101,104,105,106,108,109,115,117,118,151,157,158,159,161,162,163,187,189,212,220,225,258,262,273,278,283,299,306,326,327,353,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,-136,-134,-141,-70,-97,-112,-113,-111,-114,-115,-157,-98,-132,-116,-72,-140,317,-121,-117,-162,-140,317,-120,-129,-118,-119,]),'COMMA':([33,54,56,57,58,59,65,66,67,68,85,86,89,93,94,95,96,97,100,101,102,104,105,106,107,108,109,115,117,118,132,133,134,135,144,150,151,153,156,157,158,159,161,162,163,187,189,193,194,195,199,203,204,208,209,212,216,220,222,223,224,225,226,227,230,231,232,234,237,258,262,273,278,283,284,285,299,306,321,322,326,327,328,329,330,353,355,376,391,397,398,403,],[-249,-67,-63,-62,-65,-68,-69,-66,-31,121,-143,-142,-110,-96,-67,-130,-109,-138,-131,-133,-62,-135,-137,-140,-68,-139,-71,-136,-134,-141,-156,202,-65,-249,-249,-64,-70,-65,-66,-97,-112,-113,-111,-114,-115,-157,-98,-30,-156,-65,-155,271,-154,272,-34,-132,275,-116,202,-101,-99,-72,202,-140,-169,-175,-174,-249,-102,-140,-249,-121,-117,-162,331,-167,-140,-249,-153,-33,-120,-129,-168,-175,-174,-118,-166,-119,-249,402,-226,-225,]),'IMAGINARY':([61,76,90,91,92,99,103,113,116,119,130,142,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,246,252,256,268,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,383,393,395,],[105,105,-94,105,105,-93,-92,-95,105,105,-249,105,105,105,105,105,-94,-85,-76,-90,-91,-78,-84,-83,105,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,105,105,-51,-94,105,105,105,105,105,105,105,105,-50,105,105,-203,105,-200,105,105,105,105,105,105,-200,-202,-218,105,-199,105,-217,105,105,-249,-249,]),'IDENTIFIER':([2,12,13,19,20,22,24,31,32,33,38,39,42,44,45,46,49,50,51,52,61,67,68,70,72,73,74,76,77,78,80,88,90,91,92,99,103,113,116,119,120,121,122,130,131,134,142,148,149,154,160,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,191,192,193,195,196,197,205,206,210,211,221,238,243,246,252,255,256,263,268,271,272,275,277,282,286,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,372,378,383,388,393,395,402,],[6,6,33,35,33,44,-249,-249,58,-249,-249,58,-249,58,-12,6,33,-25,58,58,106,-31,-29,58,134,33,-55,106,44,-43,58,151,-94,153,106,-93,-92,-95,106,106,-249,193,195,-249,58,-249,106,-11,-24,153,153,106,220,106,58,-94,-85,-76,-90,-91,-78,-84,-83,106,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,227,33,-104,-30,-249,258,-51,-149,-54,-42,-94,58,58,289,106,299,289,299,289,299,134,106,106,106,106,-103,-50,258,106,-203,345,-200,106,106,227,106,106,106,-200,-202,-218,106,-199,106,-217,299,220,58,106,58,-249,-249,58,]),'ASSIGN':([32,33,39,44,54,55,56,57,58,59,60,62,65,66,67,68,75,85,86,89,93,95,96,97,99,100,101,103,104,105,106,108,109,113,115,117,118,150,151,157,158,159,161,162,163,168,169,171,172,178,179,185,186,187,189,193,208,209,212,220,223,224,225,237,258,261,262,273,278,283,299,304,306,316,322,326,327,353,376,],[-249,-249,76,80,-67,-60,-63,-62,-65,-68,-61,119,-69,-66,-31,-29,142,-143,-142,-110,-96,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-71,-95,-136,-134,-141,-64,-70,-97,-112,-113,-111,-114,-115,-94,-85,-90,-91,-87,-88,-86,-89,-157,-98,-30,-32,-34,-132,-116,-101,-99,-72,-102,-140,314,-249,-121,-117,-162,-140,342,-249,351,-33,-120,-129,-118,-119,]),'$end':([3,4,7,8,9,10,23,34,],[0,-249,-7,-249,-1,-16,-8,-15,]),'CASE':([196,197,288,361,363,368,369,370,371,381,387,393,395,399,400,],[-49,-51,-50,-249,-249,378,-220,383,-211,-219,-210,-249,-249,-221,-212,]),'XOR':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,178,-136,-134,-141,178,-70,-140,178,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,178,-116,178,178,-140,178,-140,178,178,-121,-117,-162,-140,178,178,178,178,-120,-129,178,-140,178,178,-118,178,178,178,-119,]),'STRING':([6,12,24,26,27,28,29,45,46,54,56,57,58,59,61,65,66,76,85,86,90,91,92,99,103,113,116,119,130,142,148,150,151,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,223,224,237,246,252,256,268,272,275,277,282,287,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,383,393,395,],[-3,-249,-249,-6,-5,48,-4,-12,-249,-67,-63,-62,-65,-68,108,-69,-66,108,-143,-142,-94,108,108,-93,-92,-95,108,108,-249,108,-11,-64,-70,108,108,108,108,-94,-85,-76,-90,-91,-78,-84,-83,108,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,108,108,-51,-94,-101,-99,-102,108,108,108,108,108,108,108,108,332,-50,108,108,-203,108,-200,108,108,108,108,108,108,-200,-202,-218,108,-199,108,-217,108,108,-249,-249,]),'FOR':([130,196,197,288,294,393,395,],[-249,252,-51,-50,252,-249,-249,]),'PACKAGE':([0,],[2,]),'EQUALS':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,180,-136,-134,-141,180,-70,-140,180,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,180,-116,180,180,-140,180,-140,180,-121,-117,-162,-140,180,180,180,-120,-129,180,-140,180,180,-118,180,180,180,-119,]),'ELSE':([270,365,],[-48,374,]),'QUICK_ASSIGN':([67,68,193,249,258,297,299,345,],[-31,-29,-30,295,-249,339,-249,362,]),'RANGE':([252,301,303,307,339,342,],[-249,-237,341,-238,-240,-239,]),'LSQUARE':([32,33,39,44,51,52,61,67,68,70,72,76,80,89,90,91,92,93,95,96,97,99,100,101,103,104,105,106,108,113,115,116,117,118,119,122,130,131,134,142,151,153,154,156,158,159,160,161,162,163,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,193,195,196,197,205,211,212,220,221,227,238,246,252,256,258,268,271,272,273,275,277,278,282,283,288,294,295,299,312,313,314,315,320,326,327,331,338,339,341,342,343,345,347,349,351,353,354,362,364,367,376,378,383,388,393,395,402,],[61,-249,61,61,61,61,61,-31,-29,61,61,61,61,-110,-94,61,61,164,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-95,-136,61,-134,-141,61,61,-249,61,-249,61,-70,-140,61,-141,-112,-113,61,-111,-114,-115,61,61,61,-94,-85,-76,-90,-91,-78,-84,-83,61,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,61,-30,-249,61,-51,-149,-94,-132,-116,61,-140,61,61,61,61,-140,61,61,61,-121,61,61,-117,61,-162,-50,61,61,-140,-203,61,-200,61,61,-120,-129,61,61,61,61,-200,-202,-140,-218,61,-199,-118,61,-217,164,61,-119,61,61,61,-249,-249,61,]),'IMPORT':([4,7,8,23,],[-249,-7,12,-8,]),'VAR':([4,7,8,9,10,23,34,130,196,197,288,294,393,395,],[-249,-7,-249,20,-16,-8,-15,-249,20,-51,-50,20,-249,-249,]),'GREATER':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,181,-136,-134,-141,181,-70,-140,181,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,181,-116,181,181,-140,181,-140,181,-121,-117,-162,-140,181,181,181,-120,-129,181,-140,181,181,-118,181,181,181,-119,]),'AND':([61,76,89,90,91,92,93,95,96,97,99,100,101,103,104,105,106,108,109,112,113,115,116,117,118,119,130,142,144,151,153,154,155,156,157,158,159,160,161,162,163,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,196,197,208,209,211,212,219,220,222,225,227,232,246,252,256,258,261,262,268,272,273,275,277,278,282,283,288,294,295,299,304,306,312,313,314,315,320,322,325,326,327,330,331,338,339,341,342,343,345,348,351,352,353,354,359,360,366,367,376,383,393,395,],[113,113,-110,-94,113,113,-96,-130,-109,-138,-93,-131,-133,-92,-135,-137,-140,-139,-71,113,-95,-136,113,-134,-141,113,-249,113,113,-70,-140,113,113,-141,-97,-112,-113,113,-111,-114,-115,113,113,-94,-85,-76,-90,-91,-78,-84,-83,113,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,-157,113,-98,113,-51,-32,-34,-94,-132,113,-116,113,113,-140,113,113,113,113,-140,113,113,113,113,-121,113,113,-117,113,-162,-50,113,113,-140,113,113,-203,113,-200,113,113,113,113,-120,-129,113,113,113,113,113,-200,-202,-140,113,-199,113,-118,113,113,113,113,113,-119,113,-249,-249,]),'RETURN':([130,196,197,288,294,393,395,],[-249,246,-51,-50,246,-249,-249,]),'NOT_ASSIGN':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,177,-136,-134,-141,177,-70,-140,177,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,177,-116,177,177,-140,177,-140,177,-121,-117,-162,-140,177,177,177,-120,-129,177,-140,177,177,-118,177,177,177,-119,]),'STRUCT':([32,33,39,44,51,52,61,67,68,70,72,76,80,90,91,92,99,103,113,116,119,122,130,131,134,142,154,160,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,193,195,196,197,205,211,221,238,246,252,256,268,271,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,378,383,388,393,395,402,],[63,-249,63,63,63,63,63,-31,-29,63,63,63,63,-94,63,63,-93,-92,-95,63,63,63,-249,63,-249,63,63,63,63,63,63,-94,-85,-76,-90,-91,-78,-84,-83,63,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,63,-30,-249,63,-51,-149,-94,63,63,63,63,63,63,63,63,63,63,63,-50,63,63,-203,63,-200,63,63,63,63,63,63,-200,-202,-218,63,-199,63,-217,63,63,63,63,-249,-249,63,]),'RSHIFT':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,172,-136,-134,-141,172,-70,-140,172,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,172,-116,172,172,-140,172,-140,172,172,-121,-117,-162,-140,172,172,172,172,-120,-129,172,-140,172,172,-118,172,172,172,-119,]),'INTEGER':([61,76,90,91,92,99,103,113,116,119,130,142,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,246,252,256,268,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,383,393,395,],[104,104,-94,104,104,-93,-92,-95,104,104,-249,104,104,104,104,104,-94,-85,-76,-90,-91,-78,-84,-83,104,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,104,104,-51,-94,104,104,104,104,104,104,104,104,-50,104,104,-203,104,-200,104,104,104,104,104,104,-200,-202,-218,104,-199,104,-217,104,104,-249,-249,]),'IF':([130,196,197,288,294,374,393,395,],[-249,268,-51,-50,268,268,-249,-249,]),'FLOAT':([61,76,90,91,92,99,103,113,116,119,130,142,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,246,252,256,268,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,347,349,351,354,362,367,383,393,395,],[115,115,-94,115,115,-93,-92,-95,115,115,-249,115,115,115,115,115,-94,-85,-76,-90,-91,-78,-84,-83,115,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,115,115,-51,-94,115,115,115,115,115,115,115,115,-50,115,115,-203,115,-200,115,115,115,115,115,115,-200,-202,-218,115,-199,115,-217,115,115,-249,-249,]),'LESSER':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,183,-136,-134,-141,183,-70,-140,183,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,183,-116,183,183,-140,183,-140,183,-121,-117,-162,-140,183,183,183,-120,-129,183,-140,183,183,-118,183,183,183,-119,]),'LOGICAL_OR':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,212,219,220,222,225,227,232,258,262,273,278,283,299,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,184,-136,-134,-141,184,-70,-140,184,-141,-97,-112,-113,-111,-114,-115,-157,-98,-132,184,-116,184,184,-140,184,-140,184,-121,-117,-162,-140,184,184,184,-120,-129,184,-140,184,184,-118,184,184,184,-119,]),'CONTINUE':([130,196,197,288,294,393,395,],[-249,255,-51,-50,255,-249,-249,]),'NOT':([61,76,90,91,92,99,103,113,116,119,130,142,154,160,164,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,196,197,211,246,252,256,268,272,275,277,282,288,294,295,312,313,314,315,320,331,338,339,341,342,343,351,354,367,383,393,395,],[116,116,-94,116,116,-93,-92,-95,116,116,-249,116,116,116,116,116,-94,-85,-76,-90,-91,-78,-84,-83,116,-80,-87,-88,-79,-82,-77,-81,-75,-86,-89,116,116,-51,-94,116,116,116,116,116,116,116,116,-50,116,116,-203,116,-200,116,116,116,116,116,116,-200,-202,-199,116,116,116,-249,-249,]),'TYPE':([4,7,8,9,10,23,34,130,196,197,288,294,388,393,395,],[-249,-7,-249,22,-16,-8,-15,-249,22,-51,-50,22,396,-249,-249,]),'OR':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,185,-136,-134,-141,185,-70,-140,185,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,185,-116,185,185,-140,185,-140,185,185,-121,-117,-162,-140,185,185,185,185,-120,-129,185,-140,185,185,-118,185,185,185,-119,]),'MOD':([89,93,95,96,97,100,101,104,105,106,108,109,112,115,117,118,144,151,153,155,156,157,158,159,161,162,163,187,189,208,209,212,219,220,222,225,227,232,258,261,262,273,278,283,299,304,306,322,325,326,327,330,345,348,352,353,359,360,366,376,],[-110,-96,-130,-109,-138,-131,-133,-135,-137,-140,-139,-71,186,-136,-134,-141,186,-70,-140,186,-141,-97,-112,-113,-111,-114,-115,-157,-98,-32,-34,-132,186,-116,186,186,-140,186,-140,186,186,-121,-117,-162,-140,186,186,186,186,-120,-129,186,-140,186,186,-118,186,186,186,-119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([71,],[128,]),'Conversion':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ContinueStmt':([196,294,],[239,239,]),'ExpressionRep':([144,262,306,],[208,208,208,]),'ExpressionStmt':([196,252,256,268,294,367,],[240,240,240,240,240,240,]),'Statement':([196,294,],[241,336,]),'ParameterDeclCommaRep':([135,],[203,]),'AddMulOp':([112,144,155,219,222,225,232,261,262,304,306,322,325,330,348,352,359,360,366,],[173,173,173,173,173,173,173,316,173,316,173,173,173,173,173,173,173,173,173,]),'IfStmt':([196,294,374,],[260,260,389,]),'StatementRep':([130,393,395,],[196,196,196,]),'AliasDecl':([22,77,],[41,41,]),'TypeSwitchGuard':([313,],[344,]),'TypeName':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[57,57,57,57,57,102,57,57,102,57,57,102,102,102,102,57,57,102,102,102,102,102,57,102,102,102,57,57,57,102,102,102,102,57,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,57,102,57,57,]),'BinaryOp':([112,144,155,219,222,225,232,262,306,322,325,330,348,352,359,360,366,],[176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,]),'ExprCaseClause':([370,],[387,]),'ParametersList':([72,122,],[133,133,]),'ElementListCommaOpt':([188,],[233,]),'ParameterDecl':([72,122,271,],[135,135,321,]),'FunctionName':([19,],[36,]),'LabeledStmt':([196,294,],[244,244,]),'IdentifierOpt':([313,],[349,]),'StatementList':([130,393,395,],[198,399,400,]),'CommaOpt':([133,222,226,],[200,280,281,]),'TypeAssertion':([93,364,],[162,162,]),'ConditionOpt':([338,],[358,]),'ElementType':([61,76,91,92,116,119,142,154,160,164,166,167,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[111,111,111,111,111,111,111,111,111,111,111,224,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'PointerType':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'VarSpecRep':([38,],[73,]),'TypeSwitchStmt':([196,294,],[245,245,]),'RelOp':([112,144,155,219,222,225,232,262,306,322,325,330,348,352,359,360,366,],[182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,]),'VarDecl':([9,196,294,],[21,21,21,]),'Tag':([287,],[334,]),'FieldName':([188,331,],[235,235,]),'ConstSpecRep':([31,],[49,]),'PrimaryExpr':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,364,93,93,93,]),'TypeSpec':([22,77,],[43,146,]),'KeyedElementCommaRep':([234,],[284,]),'Index':([93,364,],[158,158,]),'Parameters':([36,70,],[70,123,]),'UnaryOp':([61,76,91,92,112,116,119,142,144,154,155,160,164,166,176,188,196,219,222,225,232,246,252,256,261,262,268,272,275,277,282,294,295,304,306,313,315,320,322,325,330,331,338,339,341,348,352,354,359,360,366,367,383,],[92,92,92,92,169,92,92,92,169,92,169,92,92,92,92,92,92,169,169,169,169,92,92,92,169,169,92,92,92,92,92,92,92,169,169,92,92,92,169,169,169,92,92,92,92,169,169,92,169,169,169,92,92,]),'PackageName':([2,12,32,39,44,46,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[5,27,53,53,53,27,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ExpressionListPureOpt':([246,],[291,]),'Label':([196,243,255,263,294,],[247,290,310,310,247,]),'FunctionDecl':([9,],[14,]),'TopLevelDecl':([9,],[15,]),'ExprCaseClauseRep':([363,],[370,]),'ExprSwitchStmt':([196,294,],[248,248,]),'IdentifierList':([13,20,49,72,73,122,191,196,252,256,268,271,294,367,],[32,39,32,131,39,131,238,249,297,249,249,131,249,249,]),'TypeLit':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'ImportDeclRep':([4,],[8,]),'PackageClause':([0,],[1,]),'TypeList':([378,],[392,]),'ResultOpt':([70,],[125,]),'Selector':([93,364,],[161,161,]),'RangeClause':([252,],[298,]),'IncDecStmt':([196,252,256,268,294,367,],[250,250,250,250,250,250,]),'Key':([188,331,],[228,228,]),'GotoStmt':([196,294,],[251,251,]),'TopLevelDeclRep':([8,],[9,]),'Operand':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'CompositeLit':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'assign_op':([261,304,],[315,315,]),'Signature':([36,],[71,]),'Block':([71,196,294,302,352,374,],[129,253,253,340,365,390,]),'ExpressionIdentListOpt':([252,],[303,]),'SwitchStmt':([196,294,],[254,254,]),'ParameterListCommaOpt':([72,122,],[137,137,]),'VarSpec':([20,73,],[37,139,]),'Result':([70,],[127,]),'Assignment':([196,252,256,268,294,367,],[242,242,242,242,242,242,]),'ExpressionListTypeOpt':([160,],[214,]),'QualifiedIdent':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[66,66,66,66,66,118,66,66,118,66,66,156,118,118,118,66,66,118,156,156,118,118,66,118,118,118,66,66,66,118,118,118,118,66,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,66,118,66,66,]),'ExpressionListCommaOpt':([216,],[274,]),'TypeCaseClause':([368,],[381,]),'Literal':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'ImportDecl':([8,],[11,]),'OperandName':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'FieldDeclRep':([120,],[191,]),'TypeRep':([391,],[397,]),'start':([0,],[3,]),'Declaration':([9,196,294,],[16,257,257,]),'Condition':([252,338,],[300,356,]),'StructType':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[59,59,59,59,59,107,59,59,107,59,59,107,107,107,107,59,59,107,107,107,107,107,59,107,107,107,59,59,59,107,107,107,107,59,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,59,107,59,59,]),'ConstSpec':([13,49,],[30,83,]),'epsilon':([4,8,12,24,31,32,33,38,42,46,70,72,75,120,122,130,133,134,135,144,160,164,188,195,196,216,222,226,234,246,252,255,256,258,262,263,268,277,287,294,299,306,313,338,361,363,365,367,391,393,395,],[7,10,26,45,50,60,67,74,78,26,126,136,140,192,136,197,201,67,204,209,213,218,229,67,259,276,201,201,285,292,301,308,312,67,209,308,312,218,333,259,67,209,347,357,369,371,373,259,398,197,197,]),'LiteralValue':([114,188,282,331,],[187,231,329,231,]),'ExpressionList':([76,119,142,160,196,246,252,256,268,275,294,295,315,339,367,383,],[143,190,207,215,261,293,304,261,261,323,261,337,350,337,261,394,]),'SimpleStmt':([196,252,256,268,294,367,],[265,296,311,311,265,377,]),'ImportSpecRep':([24,],[46,]),'Expression':([61,76,91,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,354,367,383,],[112,144,155,144,144,155,144,219,222,225,232,262,144,306,262,262,322,144,325,330,262,144,348,144,352,232,359,144,360,366,262,144,]),'ImportPath':([28,],[47,]),'ExprSwitchCase':([370,],[384,]),'ExpressionOpt':([164,277,313,],[217,324,346,]),'IdentifierRep':([33,134,195,258,299,],[68,68,68,68,68,]),'TypeExprListOpt':([32,],[64,]),'FieldDecl':([191,],[236,]),'ReturnStmt':([196,294,],[264,264,]),'ConstDecl':([9,196,294,],[17,17,17,]),'ExpressionIdentifier':([252,],[307,]),'Slice':([93,364,],[159,159,]),'ArrayType':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[54,54,54,54,54,94,54,54,94,54,54,94,94,94,94,54,54,94,94,94,94,94,54,94,94,94,54,54,54,94,94,94,94,54,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,54,94,54,54,]),'ForStmt':([196,294,],[266,266,]),'Arguments':([93,364,],[163,163,]),'ElementList':([188,],[226,]),'Function':([36,],[69,]),'ImportSpec':([12,46,],[25,82,]),'Type':([32,39,44,51,52,61,70,72,76,80,90,91,92,116,119,122,131,142,154,160,164,166,167,176,188,196,211,221,238,246,252,256,268,271,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,378,383,388,402,],[55,75,79,85,87,98,124,132,98,147,85,152,98,98,98,194,199,98,152,216,98,98,223,98,98,98,85,279,287,98,98,98,98,132,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,391,98,279,403,]),'TypeSpecRep':([42,],[77,]),'LabelOpt':([255,263,],[309,319,]),'TypeCaseClauseOpt':([361,],[368,]),'TypeDecl':([9,196,294,],[18,18,18,]),'TypeSwitchCase':([368,],[379,]),'BaseType':([51,90,211,],[86,86,86,]),'UnaryExpr':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,354,367,383,],[109,109,109,157,189,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'Element':([188,282,331,],[230,328,230,]),'SimpleStmtOpt':([256,268,],[313,320,]),'ArrayLength':([61,],[110,]),'ForClause':([252,],[305,]),'TypeOpt':([32,],[62,]),'ShortVarDecl':([196,252,256,268,294,367,],[267,267,267,267,267,267,]),'ConditionBlockOpt':([252,],[302,]),'TypeDef':([22,77,],[40,40,]),'LiteralType':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'PackageNameDotOpt':([12,46,],[28,28,]),'BreakStmt':([196,294,],[269,269,]),'KeyedElement':([188,331,],[234,355,]),'TagOpt':([287,],[335,]),'BasicLit':([61,76,91,92,116,119,142,154,160,164,166,176,188,196,246,252,256,268,272,275,277,282,294,295,313,315,320,331,338,339,341,349,354,367,383,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'ExpressionListOpt':([75,],[141,]),'ElseOpt':([365,],[375,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','start',4,'p_start','parser.py',24),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',31),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',36),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',40),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',41),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',42),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',52),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',53),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',60),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',61),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',68),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',69),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',76),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',80),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',87),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',88),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',95),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',96),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',100),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',101),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',102),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',109),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',110),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',117),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',118),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',125),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',129),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',130),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',137),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',141),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',142),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',149),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',153),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',154),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',164),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',165),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',169),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',173),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',177),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',184),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',185),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',192),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',193),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',200),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',201),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',205),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',212),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',219),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',223),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',227),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',228),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',238),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',239),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',246),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',247),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',254),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',255),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',262),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',263),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',273),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',274),
  ('Type -> TypeName','Type',1,'p_type','parser.py',278),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',279),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',280),
  ('TypeName -> IDENTIFIER','TypeName',1,'p_type_name','parser.py',287),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',288),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',292),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',293),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',294),
  ('QualifiedIdent -> PackageName DOT IDENTIFIER','QualifiedIdent',3,'p_quali_ident','parser.py',301),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',308),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',309),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',316),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',317),
  ('BinaryOp -> LOGICAL_OR','BinaryOp',1,'p_binary_op','parser.py',321),
  ('BinaryOp -> LOGICAL_AND','BinaryOp',1,'p_binary_op','parser.py',322),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',323),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',324),
  ('RelOp -> EQUALS','RelOp',1,'p_rel_op','parser.py',333),
  ('RelOp -> NOT_ASSIGN','RelOp',1,'p_rel_op','parser.py',334),
  ('RelOp -> LESSER','RelOp',1,'p_rel_op','parser.py',335),
  ('RelOp -> GREATER','RelOp',1,'p_rel_op','parser.py',336),
  ('RelOp -> LESS_EQUALS','RelOp',1,'p_rel_op','parser.py',337),
  ('RelOp -> MORE_EQUALS','RelOp',1,'p_rel_op','parser.py',338),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',353),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',354),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',355),
  ('AddMulOp -> DIVIDE','AddMulOp',1,'p_add_mul_op','parser.py',356),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',357),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',358),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',359),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',376),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',377),
  ('UnaryOp -> STAR','UnaryOp',1,'p_unary_op','parser.py',378),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',379),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',390),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',391),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',392),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',404),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',408),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',412),
  ('StructType -> STRUCT LCURL FieldDeclRep RCURL','StructType',4,'p_struct_type','parser.py',420),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',424),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',425),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',432),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',436),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',437),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',441),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',448),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',449),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',450),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',451),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',452),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',453),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',454),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',461),
  ('Index -> LSQUARE Expression RSQUARE','Index',3,'p_index','parser.py',465),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',469),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',470),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',477),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',481),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',485),
  ('ExpressionListTypeOpt -> Type ExpressionListCommaOpt','ExpressionListTypeOpt',2,'p_expr_list_type_opt','parser.py',486),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',487),
  ('CommaOpt -> COMMA','CommaOpt',1,'p_comma_opt','parser.py',494),
  ('CommaOpt -> epsilon','CommaOpt',1,'p_comma_opt','parser.py',495),
  ('ExpressionListCommaOpt -> COMMA ExpressionList','ExpressionListCommaOpt',2,'p_expr_list_comma_opt','parser.py',502),
  ('ExpressionListCommaOpt -> epsilon','ExpressionListCommaOpt',1,'p_expr_list_comma_opt','parser.py',503),
  ('Conversion -> Type LPAREN Expression CommaOpt RPAREN','Conversion',5,'p_conversion','parser.py',513),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',520),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',521),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',522),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',529),
  ('Literal -> CompositeLit','Literal',1,'p_literal','parser.py',530),
  ('BasicLit -> INTEGER','BasicLit',1,'p_basic_lit','parser.py',534),
  ('BasicLit -> FLOAT','BasicLit',1,'p_basic_lit','parser.py',535),
  ('BasicLit -> IMAGINARY','BasicLit',1,'p_basic_lit','parser.py',536),
  ('BasicLit -> RUNE','BasicLit',1,'p_basic_lit','parser.py',537),
  ('BasicLit -> STRING','BasicLit',1,'p_basic_lit','parser.py',538),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',542),
  ('OperandName -> QualifiedIdent','OperandName',1,'p_operand_name','parser.py',543),
  ('PointerType -> STAR BaseType','PointerType',2,'p_point_type','parser.py',550),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',554),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',561),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',565),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',566),
  ('Result -> Parameters','Result',1,'p_result','parser.py',570),
  ('Result -> Type','Result',1,'p_result','parser.py',571),
  ('Parameters -> LPAREN ParameterListCommaOpt RPAREN','Parameters',3,'p_params','parser.py',575),
  ('ParameterListCommaOpt -> ParametersList CommaOpt','ParameterListCommaOpt',2,'p_param_list_comma_opt','parser.py',579),
  ('ParameterListCommaOpt -> epsilon','ParameterListCommaOpt',1,'p_param_list_comma_opt','parser.py',580),
  ('ParametersList -> ParameterDecl ParameterDeclCommaRep','ParametersList',2,'p_param_list','parser.py',587),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',591),
  ('ParameterDeclCommaRep -> epsilon','ParameterDeclCommaRep',1,'p_param_decl_comma_rep','parser.py',592),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',599),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',600),
  ('CompositeLit -> LiteralType LiteralValue','CompositeLit',2,'p_comp_lit','parser.py',610),
  ('LiteralType -> StructType','LiteralType',1,'p_lit_type','parser.py',614),
  ('LiteralType -> ArrayType','LiteralType',1,'p_lit_type','parser.py',615),
  ('LiteralType -> ElementType','LiteralType',1,'p_lit_type','parser.py',616),
  ('LiteralType -> TypeName','LiteralType',1,'p_lit_type','parser.py',617),
  ('LiteralValue -> LCURL ElementListCommaOpt RCURL','LiteralValue',3,'p_lit_val','parser.py',621),
  ('ElementListCommaOpt -> ElementList CommaOpt','ElementListCommaOpt',2,'p_elem_list_comma_opt','parser.py',625),
  ('ElementListCommaOpt -> epsilon','ElementListCommaOpt',1,'p_elem_list_comma_opt','parser.py',626),
  ('ElementList -> KeyedElement KeyedElementCommaRep','ElementList',2,'p_elem_list','parser.py',633),
  ('KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement','KeyedElementCommaRep',3,'p_key_elem_comma_rep','parser.py',637),
  ('KeyedElementCommaRep -> epsilon','KeyedElementCommaRep',1,'p_key_elem_comma_rep','parser.py',638),
  ('KeyedElement -> Key COLON Element','KeyedElement',3,'p_key_elem','parser.py',645),
  ('KeyedElement -> Element','KeyedElement',1,'p_key_elem','parser.py',646),
  ('Key -> FieldName','Key',1,'p_key','parser.py',653),
  ('Key -> Expression','Key',1,'p_key','parser.py',654),
  ('Key -> LiteralValue','Key',1,'p_key','parser.py',655),
  ('FieldName -> IDENTIFIER','FieldName',1,'p_field_name','parser.py',659),
  ('Element -> Expression','Element',1,'p_elem','parser.py',663),
  ('Element -> LiteralValue','Element',1,'p_elem','parser.py',664),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',677),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',678),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',679),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',680),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',681),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',682),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',683),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',684),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',685),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',686),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',687),
  ('LabeledStmt -> Label SEMICOLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',693),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',697),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',702),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',706),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',707),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',708),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',709),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',710),
  ('ShortVarDecl -> IdentifierList QUICK_ASSIGN ExpressionList','ShortVarDecl',3,'p_short_var_decl','parser.py',715),
  ('IncDecStmt -> Expression INCR','IncDecStmt',2,'p_inc_dec','parser.py',721),
  ('IncDecStmt -> Expression DECR','IncDecStmt',2,'p_inc_dec','parser.py',722),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',730),
  ('assign_op -> AddMulOp ASSIGN','assign_op',2,'p_assign_op','parser.py',734),
  ('assign_op -> ASSIGN','assign_op',1,'p_assign_op','parser.py',735),
  ('IfStmt -> IF SimpleStmtOpt Expression Block ElseOpt','IfStmt',5,'p_if_statement','parser.py',743),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',747),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',748),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',755),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',756),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',757),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',772),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',773),
  ('ExprSwitchStmt -> SWITCH SimpleStmtOpt ExpressionOpt LCURL ExprCaseClauseRep RCURL','ExprSwitchStmt',6,'p_expr_switch_stmt','parser.py',778),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',782),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',783),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',790),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',794),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',795),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',802),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',807),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',812),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',813),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',821),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',822),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',829),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',834),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',835),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',842),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',846),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',847),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',862),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',866),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',867),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',868),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',869),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',873),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',877),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',891),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',892),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',905),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',909),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',910),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',914),
  ('ExpressionIdentifier -> IdentifierList QUICK_ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',915),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',922),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',926),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',927),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',931),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',935),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',939),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',940),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',944),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',954),
]
