
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftLOGICAL_ORleftLOGICAL_ANDleftORleftXORleftANDleftEQUALSNOT_ASSIGNleftLESSERGREATERLESS_EQUALSMORE_EQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftSTARDIVIDEMODleftUPLUSUMINUSUNOTUSTARUANDAND AND_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE SEMICOLON STAR STAR_ASSIGN STRING STRUCT SWITCH TYPE UAND UMINUS UNOT UPLUS USTAR VAR XOR XOR_ASSIGNstart : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepPackageClause : PACKAGE PackageNamePackageName : IDENTIFIER PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilonImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  ImportPath : STRING TopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonTopLevelDecl : Declaration\n                  | FunctionDeclDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonFunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilonTypeOpt : Type\n               | epsilonType : TypeName\n            | TypeLit\n            | LPAREN Type RPARENTypeName : IDENTIFIER\n                | QualifiedIdentTypeLit : ArrayType\n               | StructType\n               | PointerTypeQualifiedIdent : PackageName DOT IDENTIFIERExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionBinaryOp : LOGICAL_OR\n                | LOGICAL_AND\n                | RelOp\n                | AddOp\n                | MulOpRelOp : EQUALS\n             | NOT_ASSIGN\n             | LESSER\n             | GREATER\n             | LESS_EQUALS\n             | MORE_EQUALSAddOp : PLUS\n             | MINUS\n             | OR\n             | XORMulOp : STAR\n             | DIVIDE\n             | MOD\n             | LSHIFT\n             | RSHIFT\n             | ANDUnaryOp : UPLUS\n               | UMINUS\n               | UNOT\n               | USTAR\n               | UAND UnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExprArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LCURL FieldDeclRep RCURL FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PointerType : epsilonSignature : epsilonStatement : epsilonPrimaryExpr : epsilonepsilon : '
    
_lr_action_items = {'FUNC':([4,7,8,9,10,23,34,],[-115,-7,-115,19,-16,-8,-15,]),'DIVIDE':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,132,-115,-115,132,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,132,-115,132,]),'CONST':([4,7,8,9,10,23,34,],[-115,-7,-115,13,-16,-8,-15,]),'LPAREN':([12,13,20,22,32,33,39,44,51,66,67,79,118,144,158,],[24,31,38,42,51,-115,51,51,51,-31,-29,51,51,-30,51,]),'MORE_EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,125,-115,-115,125,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,125,-115,125,]),'UNOT':([60,74,86,87,88,91,92,95,97,107,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,162,],[86,86,-96,-97,86,-95,-98,-94,86,86,-92,-74,-91,-88,-77,-85,-83,-82,-84,86,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,86,]),'UMINUS':([60,74,86,87,88,91,92,95,97,107,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,162,],[91,91,-96,-97,91,-95,-98,-94,91,91,-92,-74,-91,-88,-77,-85,-83,-82,-84,91,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,91,]),'LOGICAL_AND':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,120,-115,-115,120,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,120,-115,120,]),'LSHIFT':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,121,-115,-115,121,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,121,-115,121,]),'RSHIFT':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,119,-115,-115,119,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,119,-115,119,]),'MINUS':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,124,-115,-115,124,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,124,-115,124,]),'DOT':([12,24,45,46,52,57,113,],[29,-115,-12,29,85,-3,-11,]),'LCURL':([35,36,62,69,70,],[-37,-115,98,-112,102,]),'RSQUARE':([60,86,87,88,89,90,91,92,93,94,95,96,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,],[-115,-96,-97,-115,-114,-71,-95,-98,118,-99,-94,-102,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,-72,]),'RPAREN':([24,31,38,42,45,46,49,50,51,53,55,56,57,58,64,65,71,72,75,76,77,84,113,114,115,116,118,148,152,153,154,157,],[-115,-115,-115,-115,-12,80,83,-25,-115,-67,-63,-62,-65,-68,-69,-66,103,-55,-111,110,-43,115,-11,-24,-64,-70,-115,-54,-42,-101,-103,-104,]),'SEMICOLON':([1,5,6,11,14,15,16,17,18,21,25,30,32,33,35,36,37,39,40,41,43,44,47,48,53,55,56,57,58,59,63,64,65,66,67,68,69,70,73,74,75,78,79,80,81,82,83,86,87,88,89,90,91,92,94,95,97,100,101,102,103,104,105,106,107,108,109,110,111,112,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,145,146,149,150,151,153,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,],[4,-2,-3,23,-18,34,-17,-19,-20,-21,-9,-22,-115,-115,-37,-115,-52,-115,-45,-44,-40,-115,-13,-14,-67,-63,-62,-65,-68,-28,-26,-69,-66,-31,-29,-35,-112,-36,-115,-115,-111,-47,-115,-10,113,114,-23,-96,-97,-115,-114,-71,-95,-98,-99,-94,-115,-38,-39,-115,-53,148,-59,-56,-115,-57,-115,-41,152,-46,-64,-70,-100,-115,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,-27,-30,-115,-51,-58,-32,-34,-101,-103,-72,163,-104,-115,-113,165,-48,-115,-115,-50,-33,-110,-109,-108,-107,]),'RCURL':([98,102,142,143,145,146,147,163,165,],[-115,-115,157,-106,-49,-51,161,-105,-50,]),'LESS_EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,126,-115,-115,126,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,126,-115,126,]),'PLUS':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,127,-115,-115,127,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,127,-115,127,]),'COMMA':([33,66,67,74,86,87,88,89,90,91,92,94,95,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,144,150,151,155,162,166,],[-115,-31,99,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,-115,-115,-115,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,-30,162,-34,-72,-115,-33,]),'IMPORT':([4,7,8,23,],[-115,-7,12,-8,]),'IDENTIFIER':([2,12,13,19,20,22,24,31,32,33,38,39,42,44,45,46,49,50,51,66,67,71,72,76,77,79,85,98,99,113,114,118,142,143,144,148,152,158,163,],[6,6,33,35,33,44,-115,-115,57,-115,-115,57,-115,57,-12,6,33,-25,57,-31,-29,33,-55,44,-43,57,116,-115,144,-11,-24,57,33,-106,-30,-54,-42,57,-105,]),'ASSIGN':([32,33,39,44,53,54,55,56,57,58,59,61,64,65,66,67,73,75,115,116,118,144,153,154,157,],[-115,-115,74,79,-67,-60,-63,-62,-65,-68,-61,97,-69,-66,-31,-29,107,-111,-64,-70,-115,-30,-101,-103,-104,]),'$end':([3,4,7,8,9,10,23,34,],[0,-115,-7,-115,-1,-16,-8,-15,]),'USTAR':([60,74,86,87,88,91,92,95,97,107,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,162,],[87,87,-96,-97,87,-95,-98,-94,87,87,-92,-74,-91,-88,-77,-85,-83,-82,-84,87,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,87,]),'STRING':([6,12,24,26,27,28,29,33,45,46,53,55,56,57,58,64,65,66,67,75,113,115,116,118,144,153,154,157,158,164,],[-3,-115,-115,-6,-5,48,-4,-115,-12,-115,-67,-63,-62,-65,-68,-69,-66,-31,-29,-111,-11,-64,-70,-115,-30,-101,-103,-104,-115,167,]),'PACKAGE':([0,],[2,]),'XOR':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,131,-115,-115,131,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,131,-115,131,]),'EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,133,-115,-115,133,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,133,-115,133,]),'STAR':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,122,-115,-115,122,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,122,-115,122,]),'UPLUS':([60,74,86,87,88,91,92,95,97,107,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,162,],[95,95,-96,-97,95,-95,-98,-94,95,95,-92,-74,-91,-88,-77,-85,-83,-82,-84,95,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,95,]),'LSQUARE':([32,33,39,44,51,66,67,79,118,144,158,],[60,-115,60,60,60,-31,-29,60,60,-30,60,]),'VAR':([4,7,8,9,10,23,34,],[-115,-7,-115,20,-16,-8,-15,]),'UAND':([60,74,86,87,88,91,92,95,97,107,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,162,],[92,92,-96,-97,92,-95,-98,-94,92,92,-92,-74,-91,-88,-77,-85,-83,-82,-84,92,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,92,]),'GREATER':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,134,-115,-115,134,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,134,-115,134,]),'AND':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,135,-115,-115,135,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,135,-115,135,]),'NOT_ASSIGN':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,129,-115,-115,129,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,129,-115,129,]),'STRUCT':([32,33,39,44,51,66,67,79,118,144,158,],[62,-115,62,62,62,-31,-29,62,62,-30,62,]),'LESSER':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,137,-115,-115,137,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,137,-115,137,]),'LOGICAL_OR':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,138,-115,-115,138,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,138,-115,138,]),'TYPE':([4,7,8,9,10,23,34,],[-115,-7,-115,22,-16,-8,-15,]),'OR':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,139,-115,-115,139,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,139,-115,139,]),'MOD':([60,74,86,87,88,89,90,91,92,94,95,96,97,107,109,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,155,162,166,],[-115,-115,-96,-97,-115,-114,-71,-95,-98,-99,-94,140,-115,-115,140,-100,-92,-74,-91,-88,-77,-85,-83,-82,-84,-115,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-86,-90,140,-115,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([70,],[100,]),'ExpressionRep':([109,],[150,]),'StructType':([32,39,44,51,79,118,158,],[58,58,58,58,58,58,58,]),'PackageName':([2,12,32,39,44,46,51,79,118,158,],[5,27,52,52,52,27,52,52,52,52,]),'ArrayType':([32,39,44,51,79,118,158,],[53,53,53,53,53,53,53,]),'FunctionDecl':([9,],[14,]),'TopLevelDecl':([9,],[15,]),'TypeLit':([32,39,44,51,79,118,158,],[55,55,55,55,55,55,55,]),'Statement':([145,],[160,]),'IdentifierList':([13,20,49,71,142,],[32,39,32,39,158,]),'Expression':([60,74,97,107,128,162,],[96,109,109,109,155,166,]),'MulOp':([96,109,155,166,],[123,123,123,123,]),'Type':([32,39,44,51,79,118,158,],[54,73,78,84,112,154,164,]),'ImportDecl':([8,],[11,]),'FunctionName':([19,],[36,]),'Function':([36,],[68,]),'PackageClause':([0,],[1,]),'FieldDecl':([142,],[156,]),'StatementRep':([102,],[145,]),'FieldDeclRep':([98,],[142,]),'TypeName':([32,39,44,51,79,118,158,],[56,56,56,56,56,56,56,]),'ImportSpec':([12,46,],[25,81,]),'AliasDecl':([22,76,],[41,41,]),'AddOp':([96,109,155,166,],[130,130,130,130,]),'UnaryOp':([60,74,88,97,107,128,162,],[88,88,88,88,88,88,88,]),'ImportDeclRep':([4,],[8,]),'start':([0,],[3,]),'Tag':([164,],[169,]),'BinaryOp':([96,109,155,166,],[128,128,128,128,]),'Declaration':([9,],[16,]),'ExpressionListOpt':([73,],[106,]),'TopLevelDeclRep':([8,],[9,]),'TypeDecl':([9,],[18,]),'ConstSpec':([13,49,],[30,82,]),'epsilon':([4,8,12,24,31,32,33,36,38,39,42,44,46,51,60,73,74,79,88,97,98,102,107,109,118,128,145,158,162,164,],[7,10,26,45,50,59,66,69,72,75,77,75,26,75,89,105,89,75,89,89,143,146,89,151,75,89,159,75,89,168,]),'ExpressionList':([74,97,107,],[108,141,149,]),'UnaryExpr':([60,74,88,97,107,128,162,],[90,90,117,90,90,90,90,]),'StatementList':([102,],[147,]),'PrimaryExpr':([60,74,88,97,107,128,162,],[94,94,94,94,94,94,94,]),'ArrayLength':([60,],[93,]),'ImportSpecRep':([24,],[46,]),'Signature':([36,],[70,]),'ElementType':([118,],[153,]),'TypeOpt':([32,],[61,]),'Block':([70,],[101,]),'RelOp':([96,109,155,166,],[136,136,136,136,]),'ImportPath':([28,],[47,]),'TypeDef':([22,76,],[40,40,]),'VarSpecRep':([38,],[71,]),'ConstDecl':([9,],[17,]),'VarDecl':([9,],[21,]),'TypeSpecRep':([42,],[76,]),'IdentifierRep':([33,],[67,]),'VarSpec':([20,71,],[37,104,]),'TypeExprListOpt':([32,],[63,]),'TagOpt':([164,],[170,]),'ConstSpecRep':([31,],[49,]),'PointerType':([32,39,44,51,79,118,158,],[64,64,64,64,64,64,64,]),'TypeSpec':([22,76,],[43,111,]),'PackageNameDotOpt':([12,46,],[28,28,]),'QualifiedIdent':([32,39,44,51,79,118,158,],[65,65,65,65,65,65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','start',4,'p_start','parser.py',25),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',32),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',37),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',41),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',42),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',43),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',53),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',54),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',61),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',62),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',69),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',70),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',77),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',81),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',88),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',89),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',96),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',97),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',101),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',102),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',103),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',110),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',111),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',118),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',119),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',126),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',130),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',131),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',138),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',142),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',143),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',150),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',154),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',155),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',165),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',166),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',170),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',174),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',178),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',185),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',186),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',193),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',194),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',201),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',202),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',206),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',213),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',220),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',224),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',228),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',229),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',239),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',240),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',247),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',248),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',255),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',256),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',263),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',264),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',274),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',275),
  ('Type -> TypeName','Type',1,'p_type','parser.py',279),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',280),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',281),
  ('TypeName -> IDENTIFIER','TypeName',1,'p_type_name','parser.py',288),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',289),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',293),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',294),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',295),
  ('QualifiedIdent -> PackageName DOT IDENTIFIER','QualifiedIdent',3,'p_quali_ident','parser.py',302),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',309),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',310),
  ('BinaryOp -> LOGICAL_OR','BinaryOp',1,'p_binary_op','parser.py',317),
  ('BinaryOp -> LOGICAL_AND','BinaryOp',1,'p_binary_op','parser.py',318),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',319),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_binary_op','parser.py',320),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_binary_op','parser.py',321),
  ('RelOp -> EQUALS','RelOp',1,'p_rel_op','parser.py',330),
  ('RelOp -> NOT_ASSIGN','RelOp',1,'p_rel_op','parser.py',331),
  ('RelOp -> LESSER','RelOp',1,'p_rel_op','parser.py',332),
  ('RelOp -> GREATER','RelOp',1,'p_rel_op','parser.py',333),
  ('RelOp -> LESS_EQUALS','RelOp',1,'p_rel_op','parser.py',334),
  ('RelOp -> MORE_EQUALS','RelOp',1,'p_rel_op','parser.py',335),
  ('AddOp -> PLUS','AddOp',1,'p_add_op','parser.py',352),
  ('AddOp -> MINUS','AddOp',1,'p_add_op','parser.py',353),
  ('AddOp -> OR','AddOp',1,'p_add_op','parser.py',354),
  ('AddOp -> XOR','AddOp',1,'p_add_op','parser.py',355),
  ('MulOp -> STAR','MulOp',1,'p_mul_op','parser.py',366),
  ('MulOp -> DIVIDE','MulOp',1,'p_mul_op','parser.py',367),
  ('MulOp -> MOD','MulOp',1,'p_mul_op','parser.py',368),
  ('MulOp -> LSHIFT','MulOp',1,'p_mul_op','parser.py',369),
  ('MulOp -> RSHIFT','MulOp',1,'p_mul_op','parser.py',370),
  ('MulOp -> AND','MulOp',1,'p_mul_op','parser.py',371),
  ('UnaryOp -> UPLUS','UnaryOp',1,'p_unary_op','parser.py',375),
  ('UnaryOp -> UMINUS','UnaryOp',1,'p_unary_op','parser.py',376),
  ('UnaryOp -> UNOT','UnaryOp',1,'p_unary_op','parser.py',377),
  ('UnaryOp -> USTAR','UnaryOp',1,'p_unary_op','parser.py',378),
  ('UnaryOp -> UAND','UnaryOp',1,'p_unary_op','parser.py',379),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',383),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',384),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',394),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',398),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',402),
  ('StructType -> STRUCT LCURL FieldDeclRep RCURL','StructType',4,'p_struct_type','parser.py',411),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',415),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',416),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',423),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',427),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',428),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',432),
  ('PointerType -> epsilon','PointerType',1,'p_point_type','parser.py',443),
  ('Signature -> epsilon','Signature',1,'p_sign','parser.py',450),
  ('Statement -> epsilon','Statement',1,'p_stat','parser.py',455),
  ('PrimaryExpr -> epsilon','PrimaryExpr',1,'p_prim_expr','parser.py',460),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',464),
]
