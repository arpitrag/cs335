
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLOGICAL_ORleftLOGICAL_ANDleftORleftXORleftANDleftEQUALSNOT_ASSIGNleftLESSERGREATERLESS_EQUALSMORE_EQUALSleftLSHIFTRSHIFTleftPLUSMINUSleftSTARDIVIDEMODAND AND_ASSIGN ASSIGN BOOL_T BREAK CASE COLON COMMA COMPLEX_T CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FLOAT_T FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER INT_T LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE RUNE_T SEMICOLON STAR STAR_ASSIGN STRING STRING_T STRUCT SWITCH TYPE UINT_T VAR XOR XOR_ASSIGNstart : SourceFileType : TypeName\n            | TypeLit\n            | LPAREN Type RPARENTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT_T\n                 | FLOAT_T\n                 | UINT_T\n                 | COMPLEX_T\n                 | RUNE_T\n                 | BOOL_T\n                 | STRING_TTypeLit : ArrayType\n               | StructType\n               | PointerTypeTypeOpt : Type\n               | epsilonArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LCURL FieldDeclRep RCURL FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PointerType : STAR BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParameterListOpt RPARENParameterListOpt : ParametersList\n                             | epsilonParametersList : Type\n                      | IdentifierList Type\n                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                             | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER QUICK_ASSIGN Expression FunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : INTEGER\n                | OCTAL\n                | HEX\n                | FLOAT\n                | IMAGINARY\n                | RUNE\n                | STRINGOperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT PackageNamePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr Index\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERIndex : LSQUARE Expression RSQUARESlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                             | Type ExpressionListCommaOpt\n                             | epsilonExpressionListCommaOpt : COMMA ExpressionList\n                              | epsilonExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprBinaryOp : LOGICAL_OR\n                | LOGICAL_AND\n                | RelOp\n                | AddMulOpRelOp : EQUALS\n             | NOT_ASSIGN\n             | LESSER\n             | GREATER\n             | LESS_EQUALS\n             | MORE_EQUALSAddMulOp : UnaryOp\n                | OR\n                | XOR\n                | DIVIDE\n                | MOD\n                | LSHIFT\n                | RSHIFTUnaryOp : PLUS\n               | MINUS\n               | STAR\n               | AND Conversion : Type LPAREN Expression RPARENStatement : Declaration\n                 | LabeledStmt\n                 | SimpleStmt\n                 | ReturnStmt\n                 | BreakStmt\n                 | ContinueStmt\n                 | GotoStmt\n                 | Block\n                 | IfStmt\n                 | SwitchStmt\n                 | ForStmt  SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n\t\t | ShortVarDecl LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCR\n                 | Expression DECR  Assignment : ExpressionList AssignOp ExpressionList AssignOp : PLUS_ASSIGN\n               | MINUS_ASSIGN\n               | STAR_ASSIGN\n               | DIVIDE_ASSIGN\n               | MOD_ASSIGN\n               | AND_ASSIGN\n               | OR_ASSIGN\n               | XOR_ASSIGN\n               | LSHIFT_ASSIGN\n               | RSHIFT_ASSIGN\n               | ASSIGN  IfStmt : IF SimpleStmtOpt Expression Block ElseOpt  SimpleStmtOpt : SimpleStmt SEMICOLON\n                    | epsilon  ElseOpt : ELSE IfStmt\n              | ELSE Block\n              | epsilon  SwitchStmt : ExprSwitchStmt\n                 | TypeSwitchStmt  ExprSwitchStmt : SWITCH SimpleStmtOpt ExpressionOpt LCURL ExprCaseClauseRep RCURL ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n                        | epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                     | DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN  IdentifierOpt : IDENTIFIER QUICK_ASSIGN\n                    | epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n                        | epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n                     | DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n              | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n             | Condition\n             | ForClause\n             | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n             | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'FUNC':([5,8,9,10,11,24,35,],[-246,-231,-246,20,-234,-232,-233,]),'DIVIDE':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,180,-97,180,-101,180,-126,-106,-107,-104,-108,-109,-127,-92,180,-110,180,180,-101,180,-115,-111,-149,-101,180,180,180,-114,-101,180,180,180,-112,180,180,180,-113,]),'RSHIFT_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,298,-246,-115,-111,-149,-101,298,-246,-66,-114,-112,-113,]),'CONST':([5,8,9,10,11,24,35,133,196,197,272,278,377,379,],[-246,-231,-246,14,-234,-232,-233,-246,14,-49,-48,14,-246,-246,]),'LPAREN':([7,13,14,21,23,33,34,36,37,40,45,52,53,54,56,57,58,59,60,61,63,64,66,67,69,72,73,74,75,76,78,80,84,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,115,117,118,119,122,129,133,135,139,146,154,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,194,196,197,199,201,202,208,209,213,217,218,220,221,224,225,233,238,242,244,254,257,261,262,264,266,267,269,272,278,281,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,318,324,326,327,328,330,332,334,338,339,346,348,351,356,360,362,367,372,377,379,386,],[-236,25,32,39,43,67,-246,-87,80,67,67,67,97,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,67,-13,-16,-6,-11,-64,-62,129,67,97,67,-30,-29,-105,-147,156,97,161,-90,-103,-99,167,-146,-91,-93,-145,-94,-98,-101,-100,-96,-95,-148,-97,97,97,67,-246,67,-246,97,167,-101,156,-106,-107,156,-104,-108,-109,97,218,97,67,-147,-138,-129,-143,-144,-131,-137,-136,97,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-102,-4,-63,97,-49,-36,67,67,-147,-92,167,-110,67,-21,-19,-22,67,97,97,97,-101,97,67,97,-115,97,97,-111,-149,-48,97,-101,-185,97,97,97,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,97,-114,97,97,-182,-184,-101,-200,97,-112,97,-199,161,97,372,-113,67,97,67,-246,-246,67,]),'STAR_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,299,-246,-115,-111,-149,-101,299,-246,-66,-114,-112,-113,]),'MINUS_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,300,-246,-115,-111,-149,-101,300,-246,-66,-114,-112,-113,]),'OR_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,302,-246,-115,-111,-149,-101,302,-246,-66,-114,-112,-113,]),'GOTO':([133,196,197,272,278,377,379,],[-246,230,-49,-48,230,-246,-246,]),'XOR_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,301,-246,-115,-111,-149,-101,301,-246,-66,-114,-112,-113,]),'OCTAL':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[115,115,-147,115,115,-146,-145,-148,115,115,-246,115,115,115,115,115,-147,-138,-129,-143,-144,-131,-137,-136,115,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,115,-49,-147,115,115,115,115,115,115,115,-48,115,-185,115,115,115,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,115,115,115,-182,-184,-200,115,115,-199,115,115,-246,-246,]),'CASE':([196,197,272,345,347,352,353,354,355,365,371,377,379,383,384,],[-47,-49,-48,-246,-246,362,-202,367,-193,-201,-192,-246,-246,-203,-194,]),'LOGICAL_AND':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,171,-97,171,-101,171,-126,-106,-107,-104,-108,-109,-127,-92,171,-110,171,171,-101,171,-115,-111,-149,-101,171,171,171,-114,-101,171,171,171,-112,171,171,171,-113,]),'LSHIFT':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,172,-97,172,-101,172,-126,-106,-107,-104,-108,-109,-127,-92,172,-110,172,172,-101,172,-115,-111,-149,-101,172,172,172,-114,-101,172,172,172,-112,172,172,172,-113,]),'STAR':([33,34,40,45,52,53,67,75,76,78,80,84,88,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,122,129,133,135,139,146,148,155,156,157,158,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,194,196,197,199,201,202,208,209,216,217,218,219,222,225,233,238,242,244,248,254,257,261,262,264,266,267,269,272,278,281,288,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,314,317,318,324,326,327,328,330,332,333,334,335,337,338,339,343,344,346,350,351,360,362,367,372,377,379,386,],[52,-246,52,52,52,96,52,-64,-62,52,52,96,52,-105,-147,96,96,-125,-90,-103,-99,-146,-91,-93,-145,-94,-98,-101,-100,-96,-121,-95,169,-148,-97,96,96,52,-246,52,-246,96,169,-101,208,169,-126,-106,-107,208,-104,-108,-109,96,96,52,-147,-138,-129,-143,-144,-131,-137,-136,96,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-127,-63,96,-49,-36,52,52,-147,-92,169,-110,52,169,169,52,96,96,96,-101,169,96,52,96,-115,96,96,-111,-149,-48,96,-101,169,-185,96,96,96,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,96,169,169,-114,96,96,-182,-184,-101,-200,169,52,169,169,-112,96,169,169,-199,169,96,-113,52,96,52,-246,-246,52,]),'RUNE':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[102,102,-147,102,102,-146,-145,-148,102,102,-246,102,102,102,102,102,-147,-138,-129,-143,-144,-131,-137,-136,102,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,102,-49,-147,102,102,102,102,102,102,102,-48,102,-185,102,102,102,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,102,102,102,-182,-184,-200,102,102,-199,102,102,-246,-246,]),'MINUS':([53,84,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,122,133,146,148,155,156,157,158,159,160,161,162,163,164,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,196,197,208,209,216,217,219,222,233,238,242,244,248,254,261,262,264,266,267,269,272,278,281,288,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,314,317,318,324,326,327,328,330,333,335,337,338,339,343,344,350,351,360,367,377,379,],[104,104,-105,-147,104,104,-125,-90,-103,-99,-146,-91,-93,-145,-94,-98,-101,-100,-96,-121,-95,104,-148,-97,104,104,-246,104,104,-101,104,104,-126,-106,-107,104,-104,-108,-109,104,104,-147,-138,-129,-143,-144,-131,-137,-136,104,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-127,104,-49,-147,-92,104,-110,104,104,104,104,104,-101,104,104,104,-115,104,104,-111,-149,-48,104,-101,104,-185,104,104,104,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,104,104,104,-114,104,104,-182,-184,-101,104,104,104,-112,104,104,104,104,104,-113,104,-246,-246,]),'DOT':([13,25,46,47,62,95,99,100,101,102,105,106,108,109,110,111,112,115,118,139,152,155,159,160,162,163,164,209,217,244,262,267,269,281,318,330,338,348,360,],[30,-246,-240,30,120,-105,166,-90,-103,-99,-91,-93,-94,-98,120,-100,-96,-95,-97,120,-239,120,-106,-107,-104,-108,-109,-92,-110,120,-115,-111,-149,120,-114,120,-112,356,-113,]),'LCURL':([7,54,56,57,58,59,60,61,63,64,66,69,70,72,73,74,78,79,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,125,126,127,128,130,133,148,158,159,160,162,163,164,188,189,190,196,197,199,205,206,209,217,220,221,222,224,227,229,236,238,242,245,248,253,262,267,269,272,278,280,281,282,283,284,287,288,294,295,309,310,314,318,328,329,330,331,332,333,335,336,337,338,344,351,358,360,361,377,379,385,],[-236,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,-13,123,-16,-6,-11,-246,133,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-34,-35,-31,-33,-32,-246,-246,-126,-106,-107,-104,-108,-109,-127,-102,-4,133,-49,-36,-65,-67,-92,-110,-21,-19,-122,-22,-162,-164,-163,-246,-246,-161,-168,-165,-115,-111,-149,-48,133,-213,-101,-211,-210,133,-212,-214,-185,-246,-170,-169,-66,-114,-184,345,-101,347,-124,-123,-84,-171,133,-112,-218,-246,133,-113,-215,-246,-246,-198,]),'RSQUARE':([95,99,100,101,102,105,106,108,109,110,111,112,113,114,115,116,118,158,159,160,162,163,164,188,209,215,216,217,222,262,266,267,269,316,317,318,338,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,168,-95,-20,-97,-126,-106,-107,-104,-108,-109,-127,-92,-124,267,-110,-122,-115,-246,-111,-149,338,-123,-114,-112,360,-113,]),'LESSER':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,184,-97,184,-101,184,-126,-106,-107,-104,-108,-109,-127,-92,184,-110,184,184,-101,184,-115,-111,-149,-101,184,184,184,-114,-101,184,184,184,-112,184,184,184,-113,]),'INCR':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,209,217,222,244,248,262,267,269,281,288,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-92,-110,-122,-101,310,-115,-111,-149,-101,310,-114,-112,-113,]),'RPAREN':([7,25,32,39,43,46,47,50,51,54,56,57,58,59,60,61,63,64,66,69,72,73,74,80,81,82,85,86,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,121,129,134,136,137,138,141,148,152,153,154,155,157,158,159,160,161,162,163,164,188,189,190,195,200,203,205,206,207,209,210,211,212,213,217,219,220,221,222,224,258,259,260,262,263,265,267,268,269,313,314,315,318,338,360,380,],[-236,-246,-246,-246,-246,-240,89,92,-58,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,-13,-16,-6,-11,-246,142,-79,149,-71,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,190,-246,199,-41,-39,-37,-38,-246,-239,-57,190,-101,209,-126,-106,-107,-246,-104,-108,-109,-127,-102,-4,190,-40,-78,-65,-67,-70,-92,-118,262,-116,-246,-110,269,-21,-19,-122,-22,-45,-42,-43,-115,-117,-120,-111,318,-149,-44,-66,-119,-114,-112,-113,385,]),'SEMICOLON':([1,6,7,12,15,16,17,18,19,22,26,31,33,34,38,41,42,44,48,49,54,56,57,58,59,60,61,63,64,65,66,69,71,72,73,74,75,76,77,78,79,83,87,89,90,91,92,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,125,126,127,128,130,131,132,133,142,143,144,145,147,148,149,150,151,158,159,160,162,163,164,188,189,190,191,194,196,197,199,204,205,206,209,217,220,221,222,223,224,226,227,228,229,231,232,233,235,236,237,238,239,240,241,242,243,244,245,246,248,249,250,251,252,253,254,255,256,262,267,269,271,272,273,274,275,276,277,278,279,281,283,288,290,291,292,293,294,309,310,311,314,318,319,320,321,322,323,324,325,335,336,338,340,341,342,343,349,357,359,360,364,370,373,374,377,379,],[5,-235,-236,24,-54,35,-53,-50,-51,-52,-237,-55,-246,-246,-76,-73,-72,-68,-241,-245,-14,-9,-5,-3,-8,-2,-10,-12,-15,-61,-7,-13,-59,-16,-6,-11,-64,-62,-85,-246,-86,-246,-75,-238,152,153,-56,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-34,-35,-31,-33,-32,-88,-89,-246,-77,203,-83,-80,-81,-246,-69,207,-74,-126,-106,-107,-104,-108,-109,-127,-102,-4,-60,-63,-246,-49,-36,-82,-65,-67,-92,-110,-21,-19,-122,270,-22,-155,-162,272,-164,-151,-190,-246,-189,-163,-156,-246,-157,-159,-246,-246,-150,-101,-161,-158,-168,-246,-153,-152,-160,-165,-246,-154,-46,-115,-111,-149,-246,-48,-167,-229,-222,-224,-223,-246,324,-101,-161,-168,-228,-226,-227,328,-161,-170,-169,-225,-66,-114,-28,-27,-26,-25,-166,-246,-209,-84,-171,-112,-217,-216,351,-214,-246,-188,-183,-113,-197,-191,-186,-187,-246,-246,]),'LOGICAL_OR':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,185,-97,185,-101,185,-126,-106,-107,-104,-108,-109,-127,-92,185,-110,185,185,-101,185,-115,-111,-149,-101,185,185,185,-114,-101,185,185,185,-112,185,185,185,-113,]),'RETURN':([133,196,197,272,278,377,379,],[-246,233,-49,-48,233,-246,-246,]),'FLOAT_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[59,-246,59,59,59,59,59,-64,-62,59,59,59,59,-147,59,59,-146,-145,-148,59,59,59,-246,59,-246,59,59,59,59,59,59,-147,-138,-129,-143,-144,-131,-137,-136,59,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,59,-49,-36,59,59,-147,59,59,59,59,59,59,59,59,59,59,-48,59,-185,59,59,59,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,59,59,59,-182,-184,-200,59,59,-199,59,59,59,59,-246,-246,59,]),'RCURL':([123,133,192,193,196,197,198,270,272,345,347,352,353,354,355,365,371,377,379,383,384,],[-246,-246,224,-24,-47,-49,256,-23,-48,-246,-246,364,-202,370,-193,-201,-192,-246,-246,-203,-194,]),'LESS_EQUALS':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,176,-97,176,-101,176,-126,-106,-107,-104,-108,-109,-127,-92,176,-110,176,176,-101,176,-115,-111,-149,-101,176,176,176,-114,-101,176,176,176,-112,176,176,176,-113,]),'PLUS':([53,84,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,122,133,146,148,155,156,157,158,159,160,161,162,163,164,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,196,197,208,209,216,217,219,222,233,238,242,244,248,254,261,262,264,266,267,269,272,278,281,288,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,314,317,318,324,326,327,328,330,333,335,337,338,339,343,344,350,351,360,367,377,379,],[107,107,-105,-147,107,107,-125,-90,-103,-99,-146,-91,-93,-145,-94,-98,-101,-100,-96,-121,-95,107,-148,-97,107,107,-246,107,107,-101,107,107,-126,-106,-107,107,-104,-108,-109,107,107,-147,-138,-129,-143,-144,-131,-137,-136,107,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-127,107,-49,-147,-92,107,-110,107,107,107,107,107,-101,107,107,107,-115,107,107,-111,-149,-48,107,-101,107,-185,107,107,107,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,107,107,107,-114,107,107,-182,-184,-101,107,107,107,-112,107,107,107,107,107,-113,107,-246,-246,]),'DEFAULT':([196,197,272,345,347,352,353,354,355,365,371,377,379,383,384,],[-47,-49,-48,-246,-246,366,-202,369,-193,-201,-192,-246,-246,-203,-194,]),'SWITCH':([133,196,197,272,278,377,379,],[-246,242,-49,-48,242,-246,-246,]),'AND_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,305,-246,-115,-111,-149,-101,305,-246,-66,-114,-112,-113,]),'COLON':([7,54,56,57,58,59,60,61,63,64,66,69,72,73,74,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,148,158,159,160,162,163,164,165,188,189,190,205,206,209,214,215,216,217,220,221,222,224,234,244,262,267,269,314,317,318,338,360,363,366,368,369,375,376,378,381,382,387,],[-236,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,-13,-16,-6,-11,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-246,-126,-106,-107,-104,-108,-109,-246,-127,-102,-4,-65,-67,-92,266,-124,-123,-110,-21,-19,-122,-22,278,-167,-115,-111,-149,-66,339,-114,-112,-113,377,-205,379,-196,-246,-204,-195,-206,-208,-207,]),'DECR':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,209,217,222,244,248,262,267,269,281,288,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-92,-110,-122,-101,309,-115,-111,-149,-101,309,-114,-112,-113,]),'COMMA':([7,34,54,56,57,58,59,60,61,63,64,66,69,72,73,74,75,76,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,136,137,139,140,148,155,158,159,160,162,163,164,188,189,190,194,195,200,205,206,209,213,217,220,221,222,224,244,248,258,259,260,262,267,269,281,288,313,314,318,338,360,375,381,382,387,],[-236,-246,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,-13,-16,-6,-11,-64,124,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,201,-45,-246,202,-246,-101,-126,-106,-107,-104,-108,-109,-127,-102,-4,-63,-45,-44,261,-67,-92,264,-110,-21,-19,-122,-22,-101,-246,-45,-42,-43,-115,-111,-149,-101,-246,-44,-66,-114,-112,-113,-246,386,-208,-207,]),'IMAGINARY':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[109,109,-147,109,109,-146,-145,-148,109,109,-246,109,109,109,109,109,-147,-138,-129,-143,-144,-131,-137,-136,109,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,109,-49,-147,109,109,109,109,109,109,109,-48,109,-185,109,109,109,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,109,109,109,-182,-184,-200,109,109,-199,109,109,-246,-246,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,33,34,39,40,43,45,46,47,50,51,52,53,67,75,76,78,80,81,82,84,85,86,88,96,97,98,104,107,117,119,120,122,123,124,129,133,135,139,146,152,153,156,161,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,192,193,194,196,197,199,201,202,203,207,208,218,225,230,233,238,241,242,249,254,257,261,264,266,270,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,356,362,367,372,377,379,386,],[7,7,34,36,34,45,-246,-246,62,-246,-246,62,-246,62,-240,7,34,-58,62,110,62,-64,-62,62,139,34,-79,110,45,-71,62,-147,155,110,-146,-145,-148,110,7,110,-246,194,139,-246,62,-246,110,-239,-57,155,155,110,217,110,62,-147,-138,-129,-143,-144,-131,-137,-136,110,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,34,-24,-63,244,-49,-36,139,139,-78,-70,-147,62,62,273,110,281,273,281,273,281,62,110,110,110,-23,-48,244,-185,330,110,110,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,110,110,110,-182,-184,-200,110,110,-199,281,217,62,110,62,-246,-246,62,]),'ASSIGN':([7,33,34,40,45,54,55,56,57,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,83,93,94,95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,189,190,194,205,206,209,217,220,221,222,224,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-236,-246,-246,84,88,-14,-17,-9,-5,-3,-8,-2,-10,-12,-15,-18,-7,122,-13,-16,-6,-11,-64,-62,146,-30,-29,-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-102,-4,-63,-65,-67,-92,-110,-21,-19,-122,-22,-101,308,-246,-115,-111,-149,-101,327,-246,-66,-114,-112,-113,]),'BOOL_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[63,-246,63,63,63,63,63,-64,-62,63,63,63,63,-147,63,63,-146,-145,-148,63,63,63,-246,63,-246,63,63,63,63,63,63,-147,-138,-129,-143,-144,-131,-137,-136,63,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,63,-49,-36,63,63,-147,63,63,63,63,63,63,63,63,63,63,-48,63,-185,63,63,63,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,63,63,63,-182,-184,-200,63,63,-199,63,63,63,63,-246,-246,63,]),'BREAK':([133,196,197,272,278,377,379,],[-246,249,-49,-48,249,-246,-246,]),'XOR':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,179,-97,179,-101,179,-126,-106,-107,-104,-108,-109,-127,-92,179,-110,179,179,-101,179,-115,-111,-149,-101,179,179,179,-114,-101,179,179,179,-112,179,179,179,-113,]),'STRING':([7,13,25,27,28,29,30,46,47,53,54,56,57,58,59,60,61,63,64,66,69,72,73,74,84,93,94,96,97,98,104,107,117,119,122,133,146,152,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,196,197,208,220,221,224,233,238,242,254,261,264,266,271,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[-236,-246,-246,-244,-243,49,-242,-240,-246,111,-14,-9,-5,-3,-8,-2,-10,-12,-15,-7,-13,-16,-6,-11,111,-30,-29,-147,111,111,-146,-145,-148,111,111,-246,111,-239,111,111,111,111,-147,-138,-129,-143,-144,-131,-137,-136,111,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-102,-4,111,-49,-147,-21,-19,-22,111,111,111,111,111,111,111,319,-48,111,-185,111,111,111,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,111,111,111,-182,-184,-200,111,111,-199,111,111,-246,-246,]),'FOR':([133,196,197,272,278,377,379,],[-246,238,-49,-48,238,-246,-246,]),'PACKAGE':([0,],[2,]),'INT_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[66,-246,66,66,66,66,66,-64,-62,66,66,66,66,-147,66,66,-146,-145,-148,66,66,66,-246,66,-246,66,66,66,66,66,66,-147,-138,-129,-143,-144,-131,-137,-136,66,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,66,-49,-36,66,66,-147,66,66,66,66,66,66,66,66,66,66,-48,66,-185,66,66,66,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,66,66,66,-182,-184,-200,66,66,-199,66,66,66,66,-246,-246,66,]),'HEX':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[112,112,-147,112,112,-146,-145,-148,112,112,-246,112,112,112,112,112,-147,-138,-129,-143,-144,-131,-137,-136,112,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,112,-49,-147,112,112,112,112,112,112,112,-48,112,-185,112,112,112,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,112,112,112,-182,-184,-200,112,112,-199,112,112,-246,-246,]),'EQUALS':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,181,-97,181,-101,181,-126,-106,-107,-104,-108,-109,-127,-92,181,-110,181,181,-101,181,-115,-111,-149,-101,181,181,181,-114,-101,181,181,181,-112,181,181,181,-113,]),'ELSE':([256,349,],[-46,358,]),'QUICK_ASSIGN':([244,281,330,],[296,296,346,]),'RANGE':([238,283,285,289,327,],[-246,-219,326,-220,-221,]),'DIVIDE_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,306,-246,-115,-111,-149,-101,306,-246,-66,-114,-112,-113,]),'MOD':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,187,-97,187,-101,187,-126,-106,-107,-104,-108,-109,-127,-92,187,-110,187,187,-101,187,-115,-111,-149,-101,187,187,187,-114,-101,187,187,187,-112,187,187,187,-113,]),'LSQUARE':([33,34,40,45,52,53,67,75,76,78,80,84,88,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,115,117,118,119,122,129,133,135,139,146,155,156,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,209,217,218,225,233,238,242,244,254,257,261,262,264,266,267,269,272,278,281,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,318,324,326,327,328,330,332,334,338,339,346,348,351,360,362,367,372,377,379,386,],[53,-246,53,53,53,53,53,-64,-62,53,53,53,53,-105,-147,53,53,165,-90,-103,-99,-146,-91,-93,-145,-94,-98,-101,-100,-96,-95,-148,-97,53,53,53,-246,53,-246,53,-101,53,-106,-107,53,-104,-108,-109,53,53,53,-147,-138,-129,-143,-144,-131,-137,-136,53,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,53,-49,-36,53,53,-147,-92,-110,53,53,53,53,53,-101,53,53,53,-115,53,53,-111,-149,-48,53,-101,-185,53,53,53,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,53,-114,53,53,-182,-184,-101,-200,53,-112,53,-199,165,53,-113,53,53,53,-246,-246,53,]),'IMPORT':([5,8,9,24,],[-246,-231,13,-232,]),'VAR':([5,8,9,10,11,24,35,133,196,197,272,278,377,379,],[-246,-231,-246,21,-234,-232,-233,-246,21,-49,-48,21,-246,-246,]),'STRING_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[69,-246,69,69,69,69,69,-64,-62,69,69,69,69,-147,69,69,-146,-145,-148,69,69,69,-246,69,-246,69,69,69,69,69,69,-147,-138,-129,-143,-144,-131,-137,-136,69,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,69,-49,-36,69,69,-147,69,69,69,69,69,69,69,69,69,69,-48,69,-185,69,69,69,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,69,69,69,-182,-184,-200,69,69,-199,69,69,69,69,-246,-246,69,]),'GREATER':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,182,-97,182,-101,182,-126,-106,-107,-104,-108,-109,-127,-92,182,-110,182,182,-101,182,-115,-111,-149,-101,182,182,182,-114,-101,182,182,182,-112,182,182,182,-113,]),'AND':([53,84,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,122,133,146,148,155,156,157,158,159,160,161,162,163,164,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,196,197,208,209,216,217,219,222,233,238,242,244,248,254,261,262,264,266,267,269,272,278,281,288,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,314,317,318,324,326,327,328,330,333,335,337,338,339,343,344,350,351,360,367,377,379,],[117,117,-105,-147,117,117,-125,-90,-103,-99,-146,-91,-93,-145,-94,-98,-101,-100,-96,-121,-95,117,-148,-97,117,117,-246,117,117,-101,117,117,-126,-106,-107,117,-104,-108,-109,117,117,-147,-138,-129,-143,-144,-131,-137,-136,117,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-127,117,-49,-147,-92,117,-110,117,117,117,117,117,-101,117,117,117,-115,117,117,-111,-149,-48,117,-101,117,-185,117,117,117,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,117,117,117,-114,117,117,-182,-184,-101,117,117,117,-112,117,117,117,117,117,-113,117,-246,-246,]),'MOD_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,303,-246,-115,-111,-149,-101,303,-246,-66,-114,-112,-113,]),'NOT_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,178,-97,178,-101,178,-126,-106,-107,-104,-108,-109,-127,-92,178,-110,178,178,-101,178,-115,-111,-149,-101,178,178,178,-114,-101,178,178,178,-112,178,178,178,-113,]),'STRUCT':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[70,-246,70,70,70,70,70,-64,-62,70,70,70,70,-147,70,70,-146,-145,-148,70,70,70,-246,70,-246,70,70,70,70,70,70,-147,-138,-129,-143,-144,-131,-137,-136,70,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,70,-49,-36,70,70,-147,70,70,70,70,70,70,70,70,70,70,-48,70,-185,70,70,70,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,70,70,70,-182,-184,-200,70,70,-199,70,70,70,70,-246,-246,70,]),'RSHIFT':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,173,-97,173,-101,173,-126,-106,-107,-104,-108,-109,-127,-92,173,-110,173,173,-101,173,-115,-111,-149,-101,173,173,173,-114,-101,173,173,173,-112,173,173,173,-113,]),'LSHIFT_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,304,-246,-115,-111,-149,-101,304,-246,-66,-114,-112,-113,]),'INTEGER':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[108,108,-147,108,108,-146,-145,-148,108,108,-246,108,108,108,108,108,-147,-138,-129,-143,-144,-131,-137,-136,108,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,108,-49,-147,108,108,108,108,108,108,108,-48,108,-185,108,108,108,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,108,108,108,-182,-184,-200,108,108,-199,108,108,-246,-246,]),'IF':([133,196,197,272,278,358,377,379,],[-246,254,-49,-48,254,254,-246,-246,]),'FLOAT':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,367,377,379,],[118,118,-147,118,118,-146,-145,-148,118,118,-246,118,118,118,118,118,-147,-138,-129,-143,-144,-131,-137,-136,118,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,118,-49,-147,118,118,118,118,118,118,118,-48,118,-185,118,118,118,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,118,118,118,-182,-184,-200,118,118,-199,118,118,-246,-246,]),'MORE_EQUALS':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,175,-97,175,-101,175,-126,-106,-107,-104,-108,-109,-127,-92,175,-110,175,175,-101,175,-115,-111,-149,-101,175,175,175,-114,-101,175,175,175,-112,175,175,175,-113,]),'UINT_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[56,-246,56,56,56,56,56,-64,-62,56,56,56,56,-147,56,56,-146,-145,-148,56,56,56,-246,56,-246,56,56,56,56,56,56,-147,-138,-129,-143,-144,-131,-137,-136,56,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,56,-49,-36,56,56,-147,56,56,56,56,56,56,56,56,56,56,-48,56,-185,56,56,56,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,56,56,56,-182,-184,-200,56,56,-199,56,56,56,56,-246,-246,56,]),'COMPLEX_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[61,-246,61,61,61,61,61,-64,-62,61,61,61,61,-147,61,61,-146,-145,-148,61,61,61,-246,61,-246,61,61,61,61,61,61,-147,-138,-129,-143,-144,-131,-137,-136,61,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,61,-49,-36,61,61,-147,61,61,61,61,61,61,61,61,61,61,-48,61,-185,61,61,61,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,61,61,61,-182,-184,-200,61,61,-199,61,61,61,61,-246,-246,61,]),'CONTINUE':([133,196,197,272,278,377,379,],[-246,241,-49,-48,241,-246,-246,]),'PLUS_ASSIGN':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,118,158,159,160,162,163,164,188,205,206,209,217,222,244,247,248,262,267,269,281,286,288,314,318,338,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,-97,-126,-106,-107,-104,-108,-109,-127,-65,-67,-92,-110,-122,-101,307,-246,-115,-111,-149,-101,307,-246,-66,-114,-112,-113,]),'NOT':([53,84,96,97,98,104,107,117,119,122,133,146,156,161,165,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,196,197,208,233,238,242,254,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,339,351,367,377,379,],[119,119,-147,119,119,-146,-145,-148,119,119,-246,119,119,119,119,119,-147,-138,-129,-143,-144,-131,-137,-136,119,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,119,-49,-147,119,119,119,119,119,119,119,-48,119,-185,119,119,119,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,119,119,119,-182,-184,119,119,119,-246,-246,]),'$end':([3,4,5,8,9,10,11,24,35,],[-1,0,-246,-231,-246,-230,-234,-232,-233,]),'TYPE':([5,8,9,10,11,24,35,133,196,197,272,278,372,377,379,],[-246,-231,-246,23,-234,-232,-233,-246,23,-49,-48,23,380,-246,-246,]),'OR':([95,99,100,101,102,105,106,108,109,110,111,112,113,115,116,118,148,155,157,158,159,160,162,163,164,188,209,216,217,219,222,244,248,262,267,269,281,288,314,317,318,330,333,335,337,338,343,344,350,360,],[-105,-125,-90,-103,-99,-91,-93,-94,-98,-101,-100,-96,-121,-95,186,-97,186,-101,186,-126,-106,-107,-104,-108,-109,-127,-92,186,-110,186,186,-101,186,-115,-111,-149,-101,186,186,186,-114,-101,186,186,186,-112,186,186,186,-113,]),'RUNE_T':([33,34,40,45,52,53,67,75,76,78,80,84,88,96,97,98,104,107,117,119,122,129,133,135,139,146,156,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,194,196,197,199,201,202,208,218,225,233,238,242,254,257,261,264,266,272,278,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,324,326,327,328,332,334,339,346,351,362,367,372,377,379,386,],[74,-246,74,74,74,74,74,-64,-62,74,74,74,74,-147,74,74,-146,-145,-148,74,74,74,-246,74,-246,74,74,74,74,74,74,-147,-138,-129,-143,-144,-131,-137,-136,74,-133,-140,-141,-132,-135,-130,-134,-128,-139,-142,-63,74,-49,-36,74,74,-147,74,74,74,74,74,74,74,74,74,74,-48,74,-185,74,74,74,-181,-174,-173,-179,-178,-176,-180,-177,-175,-172,-182,74,74,74,-182,-184,-200,74,74,-199,74,74,74,74,-246,-246,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([79,],[131,]),'Conversion':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'ContinueStmt':([196,278,],[226,226,]),'ParameterListOpt':([80,129,],[134,134,]),'ExpressionRep':([148,248,288,],[205,205,205,]),'ExpressionStmt':([196,238,242,254,278,351,],[227,227,227,227,227,227,]),'Statement':([196,278,],[228,323,]),'ParameterDeclCommaRep':([80,129,],[136,136,]),'AddMulOp':([116,148,157,216,219,222,248,288,314,317,333,335,337,343,344,350,],[174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,]),'IfStmt':([196,278,358,],[246,246,373,]),'StatementRep':([133,377,379,],[196,196,196,]),'TypeToken':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,85,],[42,42,]),'TypeSwitchGuard':([295,],[329,]),'PackageNameDotOpt':([13,47,],[29,29,]),'TypeName':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'BinaryOp':([116,148,157,216,219,222,248,288,314,317,333,335,337,343,344,350,],[177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,]),'ExprCaseClause':([354,],[371,]),'ParametersList':([80,129,],[138,138,]),'ParameterDecl':([80,129,201,202,],[140,140,259,260,]),'FunctionName':([20,],[37,]),'LabeledStmt':([196,278,],[231,231,]),'IdentifierOpt':([295,],[334,]),'StatementList':([133,377,379,],[198,383,384,]),'TypeAssertion':([99,348,],[163,163,]),'ConditionOpt':([324,],[342,]),'ElementType':([168,],[221,]),'PointerType':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'VarSpecRep':([39,],[81,]),'TypeSwitchStmt':([196,278,],[232,232,]),'RelOp':([116,148,157,216,219,222,248,288,314,317,333,335,337,343,344,350,],[183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,]),'VarDecl':([10,196,278,],[22,22,22,]),'Tag':([271,],[321,]),'ConstSpecRep':([32,],[50,]),'PrimaryExpr':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,348,99,99,99,]),'TypeSpec':([23,85,],[44,150,]),'Index':([99,348,],[159,159,]),'Parameters':([37,78,],[78,125,]),'UnaryOp':([53,84,97,98,116,119,122,146,148,156,157,161,165,167,177,196,216,219,222,233,238,242,248,254,261,264,266,278,288,295,296,297,312,314,317,324,326,333,335,337,339,343,344,350,351,367,],[98,98,98,98,170,98,98,98,170,98,170,98,98,98,98,98,170,170,170,98,98,98,170,98,98,98,98,98,170,98,98,98,98,170,170,98,98,170,170,170,98,170,170,170,98,98,]),'PackageName':([2,13,47,120,],[6,28,28,189,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([233,],[275,]),'Label':([196,230,241,249,278,],[234,274,292,292,234,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprCaseClauseRep':([347,],[354,]),'ExprSwitchStmt':([196,278,],[235,235,]),'IdentifierList':([14,21,50,80,81,129,192,201,202,],[33,40,33,135,40,135,225,257,257,]),'TypeLit':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'ImportDeclRep':([5,],[9,]),'PackageClause':([0,],[1,]),'TypeList':([362,],[376,]),'ResultOpt':([78,],[127,]),'Selector':([99,348,],[162,162,]),'RangeClause':([238,],[280,]),'IncDecStmt':([196,238,242,254,278,351,],[236,236,236,236,236,236,]),'GotoStmt':([196,278,],[237,237,]),'TopLevelDeclRep':([9,],[10,]),'Operand':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'Signature':([37,],[79,]),'Block':([79,196,278,284,337,358,],[132,239,239,325,349,374,]),'ExpressionIdentListOpt':([238,],[285,]),'SwitchStmt':([196,278,],[240,240,]),'VarSpec':([21,81,],[38,143,]),'Result':([78,],[130,]),'Assignment':([196,238,242,254,278,351,],[229,229,229,229,229,229,]),'ExpressionListTypeOpt':([161,],[211,]),'QualifiedIdent':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'ExpressionListCommaOpt':([213,],[263,]),'TypeCaseClause':([352,],[365,]),'Literal':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'ImportDecl':([9,],[12,]),'OperandName':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'AssignOp':([247,286,],[297,297,]),'FieldDeclRep':([123,],[192,]),'TypeRep':([375,],[381,]),'start':([0,],[4,]),'Declaration':([10,196,278,],[17,243,243,]),'Condition':([238,324,],[282,340,]),'StructType':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ConstSpec':([14,50,],[31,91,]),'epsilon':([5,9,13,25,32,33,34,39,43,47,78,80,83,123,129,133,139,148,161,165,196,213,233,238,241,242,248,249,254,266,271,278,288,295,324,345,347,349,351,375,377,379,],[8,11,27,46,51,65,75,82,86,27,128,141,144,193,141,197,75,206,210,215,245,265,276,283,290,294,206,290,294,215,320,245,206,332,341,353,355,357,245,382,197,197,]),'ConditionBlockOpt':([238,],[284,]),'ExpressionList':([84,122,146,161,196,233,238,242,254,264,278,297,351,367,],[147,191,204,212,247,277,286,247,247,315,247,336,247,378,]),'SimpleStmt':([196,238,242,254,278,351,],[251,279,293,293,251,361,]),'ImportSpecRep':([25,],[47,]),'Expression':([53,84,97,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,339,351,367,],[116,148,157,148,148,157,148,216,219,222,248,148,288,248,248,314,148,317,248,333,335,148,337,343,344,350,248,148,]),'ImportPath':([29,],[48,]),'ExprSwitchCase':([354,],[368,]),'ExpressionOpt':([165,266,295,],[214,316,331,]),'IdentifierRep':([34,139,],[76,76,]),'TypeExprListOpt':([33,],[71,]),'ReturnStmt':([196,278,],[250,250,]),'ConstDecl':([10,196,278,],[18,18,18,]),'ExpressionIdentifier':([238,],[289,]),'Slice':([99,348,],[160,160,]),'ArrayType':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([196,278,],[252,252,]),'Arguments':([99,348,],[164,164,]),'Function':([37,],[77,]),'ImportSpec':([13,47,],[26,90,]),'Type':([33,40,45,52,53,67,78,80,84,88,96,97,98,119,122,129,135,146,156,161,165,167,168,177,196,201,202,208,218,225,233,238,242,254,257,261,264,266,278,295,296,297,312,324,326,334,339,351,362,367,372,386,],[55,83,87,93,103,121,126,137,103,151,93,154,103,103,103,195,200,103,154,213,103,103,220,103,103,258,258,93,268,271,103,103,103,103,313,103,103,103,103,103,103,103,103,103,103,103,103,103,375,103,268,387,]),'TypeSpecRep':([43,],[85,]),'LabelOpt':([241,249,],[291,311,]),'TypeCaseClauseOpt':([345,],[352,]),'TypeDecl':([10,196,278,],[19,19,19,]),'TypeSwitchCase':([352,],[363,]),'BaseType':([52,96,208,],[94,94,94,]),'UnaryExpr':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,339,351,367,],[113,113,113,158,188,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'SimpleStmtOpt':([242,254,],[295,312,]),'ArrayLength':([53,],[114,]),'ForClause':([238,],[287,]),'TypeOpt':([33,],[68,]),'ShortVarDecl':([196,238,242,254,278,351,],[253,253,253,253,253,253,]),'TypeDef':([23,85,],[41,41,]),'FieldDecl':([192,],[223,]),'BreakStmt':([196,278,],[255,255,]),'TagOpt':([271,],[322,]),'BasicLit':([53,84,97,98,119,122,146,156,161,165,167,177,196,233,238,242,254,261,264,266,278,295,296,297,312,324,326,334,339,351,367,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'ExpressionListOpt':([83,],[145,]),'ElseOpt':([349,],[359,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',24),
  ('Type -> TypeName','Type',1,'p_type','parser.py',31),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',32),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',33),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',40),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',41),
  ('TypeToken -> INT_T','TypeToken',1,'p_type_token','parser.py',45),
  ('TypeToken -> FLOAT_T','TypeToken',1,'p_type_token','parser.py',46),
  ('TypeToken -> UINT_T','TypeToken',1,'p_type_token','parser.py',47),
  ('TypeToken -> COMPLEX_T','TypeToken',1,'p_type_token','parser.py',48),
  ('TypeToken -> RUNE_T','TypeToken',1,'p_type_token','parser.py',49),
  ('TypeToken -> BOOL_T','TypeToken',1,'p_type_token','parser.py',50),
  ('TypeToken -> STRING_T','TypeToken',1,'p_type_token','parser.py',51),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',55),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',56),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',57),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',61),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',62),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',72),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',76),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',80),
  ('StructType -> STRUCT LCURL FieldDeclRep RCURL','StructType',4,'p_struct_type','parser.py',88),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',92),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',93),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',100),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',104),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',105),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',109),
  ('PointerType -> STAR BaseType','PointerType',2,'p_point_type','parser.py',116),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',120),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',127),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',131),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',132),
  ('Result -> Parameters','Result',1,'p_result','parser.py',136),
  ('Result -> Type','Result',1,'p_result','parser.py',137),
  ('Parameters -> LPAREN ParameterListOpt RPAREN','Parameters',3,'p_params','parser.py',141),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',145),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',146),
  ('ParametersList -> Type','ParametersList',1,'p_param_list','parser.py',150),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_param_list','parser.py',151),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',152),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',159),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',160),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',164),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',165),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',175),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',179),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',183),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',184),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',194),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',195),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',196),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',200),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',201),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',208),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',209),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',216),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',217),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',224),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',228),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',229),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',236),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',240),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',241),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',248),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',252),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',253),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',263),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',264),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',271),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',272),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',279),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',280),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',284),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',291),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',298),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',299),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',306),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',307),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',314),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',315),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',322),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',323),
  ('ShortVarDecl -> IDENTIFIER QUICK_ASSIGN Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',333),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',341),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',342),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',346),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',350),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',354),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',361),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',362),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',363),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',370),
  ('BasicLit -> INTEGER','BasicLit',1,'p_basic_lit','parser.py',374),
  ('BasicLit -> OCTAL','BasicLit',1,'p_basic_lit','parser.py',375),
  ('BasicLit -> HEX','BasicLit',1,'p_basic_lit','parser.py',376),
  ('BasicLit -> FLOAT','BasicLit',1,'p_basic_lit','parser.py',377),
  ('BasicLit -> IMAGINARY','BasicLit',1,'p_basic_lit','parser.py',378),
  ('BasicLit -> RUNE','BasicLit',1,'p_basic_lit','parser.py',379),
  ('BasicLit -> STRING','BasicLit',1,'p_basic_lit','parser.py',380),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',384),
  ('QualifiedIdent -> IDENTIFIER DOT PackageName','QualifiedIdent',3,'p_quali_ident','parser.py',391),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',398),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',399),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',400),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',401),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',402),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',403),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',404),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',411),
  ('Index -> LSQUARE Expression RSQUARE','Index',3,'p_index','parser.py',415),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',419),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',420),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',427),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',431),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',435),
  ('ExpressionListTypeOpt -> Type ExpressionListCommaOpt','ExpressionListTypeOpt',2,'p_expr_list_type_opt','parser.py',436),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',437),
  ('ExpressionListCommaOpt -> COMMA ExpressionList','ExpressionListCommaOpt',2,'p_expr_list_comma_opt','parser.py',452),
  ('ExpressionListCommaOpt -> epsilon','ExpressionListCommaOpt',1,'p_expr_list_comma_opt','parser.py',453),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',463),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',464),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',471),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',472),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',476),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',477),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',478),
  ('BinaryOp -> LOGICAL_OR','BinaryOp',1,'p_binary_op','parser.py',487),
  ('BinaryOp -> LOGICAL_AND','BinaryOp',1,'p_binary_op','parser.py',488),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',489),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',490),
  ('RelOp -> EQUALS','RelOp',1,'p_rel_op','parser.py',499),
  ('RelOp -> NOT_ASSIGN','RelOp',1,'p_rel_op','parser.py',500),
  ('RelOp -> LESSER','RelOp',1,'p_rel_op','parser.py',501),
  ('RelOp -> GREATER','RelOp',1,'p_rel_op','parser.py',502),
  ('RelOp -> LESS_EQUALS','RelOp',1,'p_rel_op','parser.py',503),
  ('RelOp -> MORE_EQUALS','RelOp',1,'p_rel_op','parser.py',504),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',519),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',520),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',521),
  ('AddMulOp -> DIVIDE','AddMulOp',1,'p_add_mul_op','parser.py',522),
  ('AddMulOp -> MOD','AddMulOp',1,'p_add_mul_op','parser.py',523),
  ('AddMulOp -> LSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',524),
  ('AddMulOp -> RSHIFT','AddMulOp',1,'p_add_mul_op','parser.py',525),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',542),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',543),
  ('UnaryOp -> STAR','UnaryOp',1,'p_unary_op','parser.py',544),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',545),
  ('Conversion -> Type LPAREN Expression RPAREN','Conversion',4,'p_conversion','parser.py',561),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',572),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',573),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',574),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',575),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',576),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',577),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',578),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',579),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',580),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',581),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',582),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',588),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',589),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',590),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',591),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',592),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',597),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',601),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',606),
  ('IncDecStmt -> Expression INCR','IncDecStmt',2,'p_inc_dec','parser.py',610),
  ('IncDecStmt -> Expression DECR','IncDecStmt',2,'p_inc_dec','parser.py',611),
  ('Assignment -> ExpressionList AssignOp ExpressionList','Assignment',3,'p_assignment','parser.py',619),
  ('AssignOp -> PLUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',623),
  ('AssignOp -> MINUS_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',624),
  ('AssignOp -> STAR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',625),
  ('AssignOp -> DIVIDE_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',626),
  ('AssignOp -> MOD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',627),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',628),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',629),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',630),
  ('AssignOp -> LSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',631),
  ('AssignOp -> RSHIFT_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',632),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',633),
  ('IfStmt -> IF SimpleStmtOpt Expression Block ElseOpt','IfStmt',5,'p_if_statement','parser.py',638),
  ('SimpleStmtOpt -> SimpleStmt SEMICOLON','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',642),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',643),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',650),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',651),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',652),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',667),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',668),
  ('ExprSwitchStmt -> SWITCH SimpleStmtOpt ExpressionOpt LCURL ExprCaseClauseRep RCURL','ExprSwitchStmt',6,'p_expr_switch_stmt','parser.py',673),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',677),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',678),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',685),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',689),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',690),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LCURL TypeCaseClauseOpt RCURL','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',697),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',702),
  ('IdentifierOpt -> IDENTIFIER QUICK_ASSIGN','IdentifierOpt',2,'p_identifier_opt','parser.py',707),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',708),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',716),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',717),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',724),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',729),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',730),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',737),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',741),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',742),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',757),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',761),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',762),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',763),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',764),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',768),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',772),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',786),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',787),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',800),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',804),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',805),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',809),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',816),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',820),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',821),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',825),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',829),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',833),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',834),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',838),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',845),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',849),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',850),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',857),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',858),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',868),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',873),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',880),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',881),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',888),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',889),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',896),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',900),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',901),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',902),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',909),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',915),
]
