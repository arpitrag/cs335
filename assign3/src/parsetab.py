
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftPLUSMINUSANDLOGICAL_ANDORXORLSHIFTRSHIFTleftSTARDIVIDEMODAND AND_ASSIGN AND_XOR AND_XOR_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE SEMICOLON STAR STAR_ASSIGN STRING STRUCT SWITCH TYPE VAR XOR XOR_ASSIGNstart : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepPackageClause : PACKAGE PackageNamePackageName : IDENTIFIER PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilonImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  ImportPath : STRING TopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonTopLevelDecl : Declaration\n                  | FunctionDeclDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt ASSIGN ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonFunctionDecl : FUNC FunctionName Function\n                    | FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER ASSIGN TypeTypeDef : IDENTIFIER TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n               | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                         | epsilonTypeOpt : Type\n               | epsilonType : TypeName\n            | TypeLit\n            | LPAREN Type RPARENTypeName : IDENTIFIER\n                | QualifiedIdentTypeLit : ArrayType\n               | StructType\n               | PointerTypeQualifiedIdent : PackageName DOT IDENTIFIERExpression : UnaryExpr\n                  | Expression BinaryOp ExpressionBinaryOp : LOGICAL_OR\n                | LOGICAL_AND\n                | RelOp\n                | AddOp\n                | MulOpRelOp : EQUALS\n             | NOT_ASSIGN\n             | LESSER\n             | GREATER\n             | LESS_EQUALS\n             | MORE_EQUALSAddOp : PLUS\n             | MINUS\n             | OR\n             | XORMulOp : STAR\n             | DIVIDE\n             | MOD\n             | LSHIFT\n             | RSHIFT\n             | AND\n             | AND_XORUnaryOp : PLUS\n               | MINUS\n               | NOT\n               | XOR\n               | STAR\n               | AND UnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExprArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LCURL FieldDeclRep RCURL FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n             | epsilon  Tag : STRING PointerType : epsilonSignature : epsilonStatement : epsilonPrimaryExpr : epsilonepsilon : '
    
_lr_action_items = {'FUNC':([4,7,8,9,10,23,34,],[-117,-7,-117,19,-16,-8,-15,]),'DIVIDE':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,133,-96,-117,-117,133,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,133,-117,133,]),'CONST':([4,7,8,9,10,23,34,],[-117,-7,-117,13,-16,-8,-15,]),'LPAREN':([12,13,20,22,32,33,39,44,51,66,67,79,119,146,160,],[24,31,38,42,51,-117,51,51,51,-31,-29,51,51,-30,51,]),'MORE_EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,126,-96,-117,-117,126,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,126,-117,126,]),'LOGICAL_AND':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,121,-96,-117,-117,121,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,121,-117,121,]),'LSHIFT':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,122,-96,-117,-117,122,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,122,-117,122,]),'RSHIFT':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,120,-96,-117,-117,120,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,120,-117,120,]),'MINUS':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[97,97,-100,-98,97,-116,-71,-97,-99,-101,-95,125,-96,97,97,125,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,97,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,125,97,125,]),'DOT':([12,24,45,46,52,57,114,],[29,-117,-12,29,85,-3,-11,]),'LCURL':([35,36,62,69,70,],[-37,-117,99,-114,103,]),'RSQUARE':([60,86,87,88,89,90,91,92,93,94,95,96,97,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,],[-117,-100,-98,-117,-116,-71,-97,-99,119,-101,-95,-104,-96,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,-72,]),'RPAREN':([24,31,38,42,45,46,49,50,51,53,55,56,57,58,64,65,71,72,75,76,77,84,114,115,116,117,119,150,154,155,156,159,],[-117,-117,-117,-117,-12,80,83,-25,-117,-67,-63,-62,-65,-68,-69,-66,104,-55,-113,111,-43,116,-11,-24,-64,-70,-117,-54,-42,-103,-105,-106,]),'SEMICOLON':([1,5,6,11,14,15,16,17,18,21,25,30,32,33,35,36,37,39,40,41,43,44,47,48,53,55,56,57,58,59,63,64,65,66,67,68,69,70,73,74,75,78,79,80,81,82,83,86,87,88,89,90,91,92,94,95,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,146,147,148,151,152,153,155,156,157,158,159,160,161,162,163,164,166,167,168,169,170,171,172,],[4,-2,-3,23,-18,34,-17,-19,-20,-21,-9,-22,-117,-117,-37,-117,-52,-117,-45,-44,-40,-117,-13,-14,-67,-63,-62,-65,-68,-28,-26,-69,-66,-31,-29,-35,-114,-36,-117,-117,-113,-47,-117,-10,114,115,-23,-100,-98,-117,-116,-71,-97,-99,-101,-95,-96,-117,-38,-39,-117,-53,150,-59,-56,-117,-57,-117,-41,154,-46,-64,-70,-102,-117,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,-27,-30,-117,-51,-58,-32,-34,-103,-105,-72,165,-106,-117,-115,167,-48,-117,-117,-50,-33,-112,-111,-110,-109,]),'RCURL':([99,103,144,145,147,148,149,165,167,],[-117,-117,159,-108,-49,-51,163,-107,-50,]),'LESS_EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,127,-96,-117,-117,127,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,127,-117,127,]),'PLUS':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[95,95,-100,-98,95,-116,-71,-97,-99,-101,-95,128,-96,95,95,128,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,95,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,128,95,128,]),'COMMA':([33,66,67,74,86,87,88,89,90,91,92,94,95,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,152,153,157,164,168,],[-117,-31,100,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,-96,-117,-117,-117,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,-30,164,-34,-72,-117,-33,]),'IMPORT':([4,7,8,23,],[-117,-7,12,-8,]),'IDENTIFIER':([2,12,13,19,20,22,24,31,32,33,38,39,42,44,45,46,49,50,51,66,67,71,72,76,77,79,85,99,100,114,115,119,144,145,146,150,154,160,165,],[6,6,33,35,33,44,-117,-117,57,-117,-117,57,-117,57,-12,6,33,-25,57,-31,-29,33,-55,44,-43,57,117,-117,146,-11,-24,57,33,-108,-30,-54,-42,57,-107,]),'ASSIGN':([32,33,39,44,53,54,55,56,57,58,59,61,64,65,66,67,73,75,116,117,119,146,155,156,159,],[-117,-117,74,79,-67,-60,-63,-62,-65,-68,-61,98,-69,-66,-31,-29,108,-113,-64,-70,-117,-30,-103,-105,-106,]),'$end':([3,4,7,8,9,10,23,34,],[0,-117,-7,-117,-1,-16,-8,-15,]),'XOR':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[87,87,-100,-98,87,-116,-71,-97,-99,-101,-95,132,-96,87,87,132,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,87,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,132,87,132,]),'STRING':([6,12,24,26,27,28,29,33,45,46,53,55,56,57,58,64,65,66,67,75,114,116,117,119,146,155,156,159,160,166,],[-3,-117,-117,-6,-5,48,-4,-117,-12,-117,-67,-63,-62,-65,-68,-69,-66,-31,-29,-113,-11,-64,-70,-117,-30,-103,-105,-106,-117,169,]),'PACKAGE':([0,],[2,]),'EQUALS':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,134,-96,-117,-117,134,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,134,-117,134,]),'STAR':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[92,92,-100,-98,92,-116,-71,-97,-99,-101,-95,123,-96,92,92,123,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,92,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,123,92,123,]),'LSQUARE':([32,33,39,44,51,66,67,79,119,146,160,],[60,-117,60,60,60,-31,-29,60,60,-30,60,]),'VAR':([4,7,8,9,10,23,34,],[-117,-7,-117,20,-16,-8,-15,]),'GREATER':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,135,-96,-117,-117,135,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,135,-117,135,]),'AND':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[86,86,-100,-98,86,-116,-71,-97,-99,-101,-95,136,-96,86,86,136,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,86,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,136,86,136,]),'NOT_ASSIGN':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,130,-96,-117,-117,130,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,130,-117,130,]),'STRUCT':([32,33,39,44,51,66,67,79,119,146,160,],[62,-117,62,62,62,-31,-29,62,62,-30,62,]),'LESSER':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,138,-96,-117,-117,138,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,138,-117,138,]),'LOGICAL_OR':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,139,-96,-117,-117,139,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,139,-117,139,]),'AND_XOR':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,140,-96,-117,-117,140,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,140,-117,140,]),'NOT':([60,74,86,87,88,91,92,95,97,98,108,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,164,],[91,91,-100,-98,91,-97,-99,-95,-96,91,91,-92,-74,-91,-88,-77,-85,-83,-82,-84,91,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,91,]),'TYPE':([4,7,8,9,10,23,34,],[-117,-7,-117,22,-16,-8,-15,]),'OR':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,141,-96,-117,-117,141,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,141,-117,141,]),'MOD':([60,74,86,87,88,89,90,91,92,94,95,96,97,98,108,110,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,157,164,168,],[-117,-117,-100,-98,-117,-116,-71,-97,-99,-101,-95,142,-96,-117,-117,142,-102,-92,-74,-91,-88,-77,-85,-83,-82,-84,-117,-79,-76,-87,-89,-78,-81,-93,-75,-80,-73,-94,-86,-90,142,-117,142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([70,],[101,]),'ExpressionRep':([110,],[152,]),'StructType':([32,39,44,51,79,119,160,],[58,58,58,58,58,58,58,]),'PackageName':([2,12,32,39,44,46,51,79,119,160,],[5,27,52,52,52,27,52,52,52,52,]),'ArrayType':([32,39,44,51,79,119,160,],[53,53,53,53,53,53,53,]),'FunctionDecl':([9,],[14,]),'TopLevelDecl':([9,],[15,]),'TypeLit':([32,39,44,51,79,119,160,],[55,55,55,55,55,55,55,]),'Statement':([147,],[162,]),'IdentifierList':([13,20,49,71,144,],[32,39,32,39,160,]),'Expression':([60,74,98,108,129,164,],[96,110,110,110,157,168,]),'MulOp':([96,110,157,168,],[124,124,124,124,]),'Type':([32,39,44,51,79,119,160,],[54,73,78,84,113,156,166,]),'ImportDecl':([8,],[11,]),'FunctionName':([19,],[36,]),'Function':([36,],[68,]),'PackageClause':([0,],[1,]),'FieldDecl':([144,],[158,]),'StatementRep':([103,],[147,]),'FieldDeclRep':([99,],[144,]),'TypeName':([32,39,44,51,79,119,160,],[56,56,56,56,56,56,56,]),'ImportSpec':([12,46,],[25,81,]),'AliasDecl':([22,76,],[41,41,]),'AddOp':([96,110,157,168,],[131,131,131,131,]),'UnaryOp':([60,74,88,98,108,129,164,],[88,88,88,88,88,88,88,]),'ImportDeclRep':([4,],[8,]),'start':([0,],[3,]),'Tag':([166,],[171,]),'BinaryOp':([96,110,157,168,],[129,129,129,129,]),'Declaration':([9,],[16,]),'ExpressionListOpt':([73,],[107,]),'TopLevelDeclRep':([8,],[9,]),'TypeDecl':([9,],[18,]),'ConstSpec':([13,49,],[30,82,]),'epsilon':([4,8,12,24,31,32,33,36,38,39,42,44,46,51,60,73,74,79,88,98,99,103,108,110,119,129,147,160,164,166,],[7,10,26,45,50,59,66,69,72,75,77,75,26,75,89,106,89,75,89,89,145,148,89,153,75,89,161,75,89,170,]),'ExpressionList':([74,98,108,],[109,143,151,]),'UnaryExpr':([60,74,88,98,108,129,164,],[90,90,118,90,90,90,90,]),'StatementList':([103,],[149,]),'PrimaryExpr':([60,74,88,98,108,129,164,],[94,94,94,94,94,94,94,]),'ArrayLength':([60,],[93,]),'ImportSpecRep':([24,],[46,]),'Signature':([36,],[70,]),'ElementType':([119,],[155,]),'TypeOpt':([32,],[61,]),'Block':([70,],[102,]),'RelOp':([96,110,157,168,],[137,137,137,137,]),'ImportPath':([28,],[47,]),'TypeDef':([22,76,],[40,40,]),'VarSpecRep':([38,],[71,]),'ConstDecl':([9,],[17,]),'VarDecl':([9,],[21,]),'TypeSpecRep':([42,],[76,]),'IdentifierRep':([33,],[67,]),'VarSpec':([20,71,],[37,105,]),'TypeExprListOpt':([32,],[63,]),'TagOpt':([166,],[172,]),'ConstSpecRep':([31,],[49,]),'PointerType':([32,39,44,51,79,119,160,],[64,64,64,64,64,64,64,]),'TypeSpec':([22,76,],[43,112,]),'PackageNameDotOpt':([12,46,],[28,28,]),'QualifiedIdent':([32,39,44,51,79,119,160,],[65,65,65,65,65,65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','start',4,'p_start','parser.py',16),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',23),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',28),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',32),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',33),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',34),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',44),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',45),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',52),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',53),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',60),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',61),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',68),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',72),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',79),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',80),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',87),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',88),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',92),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',93),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',94),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',101),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',102),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',109),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',110),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',117),
  ('TypeExprListOpt -> TypeOpt ASSIGN ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',121),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',122),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',129),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',133),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',134),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',141),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',145),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',146),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',156),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',157),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',161),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',165),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',169),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',176),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',177),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',184),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',185),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',192),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',193),
  ('AliasDecl -> IDENTIFIER ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',197),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',204),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',211),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',215),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',219),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',220),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',230),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',231),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',238),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',239),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',246),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',247),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',254),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',255),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',265),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',266),
  ('Type -> TypeName','Type',1,'p_type','parser.py',270),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',271),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',272),
  ('TypeName -> IDENTIFIER','TypeName',1,'p_type_name','parser.py',279),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',280),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',284),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',285),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',286),
  ('QualifiedIdent -> PackageName DOT IDENTIFIER','QualifiedIdent',3,'p_quali_ident','parser.py',293),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',300),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',301),
  ('BinaryOp -> LOGICAL_OR','BinaryOp',1,'p_binary_op','parser.py',308),
  ('BinaryOp -> LOGICAL_AND','BinaryOp',1,'p_binary_op','parser.py',309),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',310),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_binary_op','parser.py',311),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_binary_op','parser.py',312),
  ('RelOp -> EQUALS','RelOp',1,'p_rel_op','parser.py',321),
  ('RelOp -> NOT_ASSIGN','RelOp',1,'p_rel_op','parser.py',322),
  ('RelOp -> LESSER','RelOp',1,'p_rel_op','parser.py',323),
  ('RelOp -> GREATER','RelOp',1,'p_rel_op','parser.py',324),
  ('RelOp -> LESS_EQUALS','RelOp',1,'p_rel_op','parser.py',325),
  ('RelOp -> MORE_EQUALS','RelOp',1,'p_rel_op','parser.py',326),
  ('AddOp -> PLUS','AddOp',1,'p_add_op','parser.py',343),
  ('AddOp -> MINUS','AddOp',1,'p_add_op','parser.py',344),
  ('AddOp -> OR','AddOp',1,'p_add_op','parser.py',345),
  ('AddOp -> XOR','AddOp',1,'p_add_op','parser.py',346),
  ('MulOp -> STAR','MulOp',1,'p_mul_op','parser.py',357),
  ('MulOp -> DIVIDE','MulOp',1,'p_mul_op','parser.py',358),
  ('MulOp -> MOD','MulOp',1,'p_mul_op','parser.py',359),
  ('MulOp -> LSHIFT','MulOp',1,'p_mul_op','parser.py',360),
  ('MulOp -> RSHIFT','MulOp',1,'p_mul_op','parser.py',361),
  ('MulOp -> AND','MulOp',1,'p_mul_op','parser.py',362),
  ('MulOp -> AND_XOR','MulOp',1,'p_mul_op','parser.py',363),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',367),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',368),
  ('UnaryOp -> NOT','UnaryOp',1,'p_unary_op','parser.py',369),
  ('UnaryOp -> XOR','UnaryOp',1,'p_unary_op','parser.py',370),
  ('UnaryOp -> STAR','UnaryOp',1,'p_unary_op','parser.py',371),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',372),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',376),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',377),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',387),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',391),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',395),
  ('StructType -> STRUCT LCURL FieldDeclRep RCURL','StructType',4,'p_struct_type','parser.py',404),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',408),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',409),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',416),
  ('TagOpt -> Tag','TagOpt',1,'p_TagOpt','parser.py',420),
  ('TagOpt -> epsilon','TagOpt',1,'p_TagOpt','parser.py',421),
  ('Tag -> STRING','Tag',1,'p_Tag','parser.py',425),
  ('PointerType -> epsilon','PointerType',1,'p_point_type','parser.py',436),
  ('Signature -> epsilon','Signature',1,'p_sign','parser.py',443),
  ('Statement -> epsilon','Statement',1,'p_stat','parser.py',448),
  ('PrimaryExpr -> epsilon','PrimaryExpr',1,'p_prim_expr','parser.py',453),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',457),
]
