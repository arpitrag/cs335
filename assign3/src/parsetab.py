
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AND_ASSIGN AND_XOR AND_XOR_ASSIGN ASSIGN BREAK CASE COLON COMMA CONST CONTINUE DECR DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELSE EQUALS FLOAT FOR FUNC GOTO GREATER HEX IDENTIFIER IF IMAGINARY IMPORT INCR INTEGER LCURL LESSER LESS_EQUALS LOGICAL_AND LOGICAL_OR LPAREN LSHIFT LSHIFT_ASSIGN LSQUARE MINUS MINUS_ASSIGN MOD MOD_ASSIGN MORE_EQUALS NOT NOT_ASSIGN OCTAL OR OR_ASSIGN PACKAGE PLUS PLUS_ASSIGN QUICK_ASSIGN RANGE RCURL RETURN RPAREN RSHIFT RSHIFT_ASSIGN RSQUARE RUNE SEMICOLON STAR STAR_ASSIGN STRING STRUCT SWITCH TYPE VAR XOR XOR_ASSIGNstart : expressionexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term STAR factorterm : factorfactor : INTEGER'
    
_lr_action_items = {'INTEGER':([0,6,7,8,],[4,4,4,4,]),'$end':([1,2,3,4,5,9,10,11,],[-4,0,-6,-7,-1,-5,-2,-3,]),'STAR':([1,3,4,9,10,11,],[6,-6,-7,-5,6,6,]),'MINUS':([1,3,4,5,9,10,11,],[-4,-6,-7,8,-5,-2,-3,]),'PLUS':([1,3,4,5,9,10,11,],[-4,-6,-7,7,-5,-2,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[2,]),'term':([0,7,8,],[1,10,11,]),'expression':([0,],[5,]),'factor':([0,6,7,8,],[3,9,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> expression','start',1,'p_start','parser.py',50),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',55),
  ('expression -> expression MINUS term','expression',3,'p_expression_plus','parser.py',56),
  ('expression -> term','expression',1,'p_expression_term','parser.py',68),
  ('term -> term STAR factor','term',3,'p_term_times','parser.py',73),
  ('term -> factor','term',1,'p_term_factor','parser.py',82),
  ('factor -> INTEGER','factor',1,'p_factor_num','parser.py',86),
]
